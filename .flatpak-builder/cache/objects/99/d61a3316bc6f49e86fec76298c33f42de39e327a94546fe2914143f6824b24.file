// This file is generated by kconfig_compiler_kf6 from mousesettings.kcfg.
// All changes you do to this file will be lost.
#ifndef MOUSESETTINGS_H
#define MOUSESETTINGS_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

class MouseSettings : public KConfigSkeleton
{
  Q_OBJECT
  public:

    static MouseSettings *self();
    ~MouseSettings() override;

    /**
      Set Left
    */
    static
    void setLeft( const QString & v )
    {
      if (v != self()->mLeft && !self()->isLeftImmutable()) {
        self()->mLeft = v;
        Q_EMIT self()->LeftChanged();
      }
    }

    Q_PROPERTY(QString left READ left WRITE setLeft NOTIFY LeftChanged)
    Q_PROPERTY(bool isLeftImmutable READ isLeftImmutable CONSTANT)
    /**
      Get Left
    */
    static
    QString left()
    {
      return self()->mLeft;
    }

    /**
      Is Left Immutable
    */
    static
    bool isLeftImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Left" ) );
    }

    /**
      Set Leftx2
    */
    static
    void setLeftx2( const QString & v )
    {
      if (v != self()->mLeftx2 && !self()->isLeftx2Immutable()) {
        self()->mLeftx2 = v;
        Q_EMIT self()->Leftx2Changed();
      }
    }

    Q_PROPERTY(QString leftx2 READ leftx2 WRITE setLeftx2 NOTIFY Leftx2Changed)
    Q_PROPERTY(bool isLeftx2Immutable READ isLeftx2Immutable CONSTANT)
    /**
      Get Leftx2
    */
    static
    QString leftx2()
    {
      return self()->mLeftx2;
    }

    /**
      Is Leftx2 Immutable
    */
    static
    bool isLeftx2Immutable()
    {
      return self()->isImmutable( QStringLiteral( "Leftx2" ) );
    }

    /**
      Get Leftx2 default value
    */
    static
    QString defaultLeftx2Value()
    {
        return defaultLeftx2Value_helper();
    }

    /**
      Set Middle
    */
    static
    void setMiddle( const QString & v )
    {
      if (v != self()->mMiddle && !self()->isMiddleImmutable()) {
        self()->mMiddle = v;
        Q_EMIT self()->MiddleChanged();
      }
    }

    Q_PROPERTY(QString middle READ middle WRITE setMiddle NOTIFY MiddleChanged)
    Q_PROPERTY(bool isMiddleImmutable READ isMiddleImmutable CONSTANT)
    /**
      Get Middle
    */
    static
    QString middle()
    {
      return self()->mMiddle;
    }

    /**
      Is Middle Immutable
    */
    static
    bool isMiddleImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Middle" ) );
    }

    /**
      Get Middle default value
    */
    static
    QString defaultMiddleValue()
    {
        return defaultMiddleValue_helper();
    }

    /**
      Set Middlex2
    */
    static
    void setMiddlex2( const QString & v )
    {
      if (v != self()->mMiddlex2 && !self()->isMiddlex2Immutable()) {
        self()->mMiddlex2 = v;
        Q_EMIT self()->Middlex2Changed();
      }
    }

    Q_PROPERTY(QString middlex2 READ middlex2 WRITE setMiddlex2 NOTIFY Middlex2Changed)
    Q_PROPERTY(bool isMiddlex2Immutable READ isMiddlex2Immutable CONSTANT)
    /**
      Get Middlex2
    */
    static
    QString middlex2()
    {
      return self()->mMiddlex2;
    }

    /**
      Is Middlex2 Immutable
    */
    static
    bool isMiddlex2Immutable()
    {
      return self()->isImmutable( QStringLiteral( "Middlex2" ) );
    }

    /**
      Get Middlex2 default value
    */
    static
    QString defaultMiddlex2Value()
    {
        return defaultMiddlex2Value_helper();
    }

    /**
      Set Right
    */
    static
    void setRight( const QString & v )
    {
      if (v != self()->mRight && !self()->isRightImmutable()) {
        self()->mRight = v;
        Q_EMIT self()->RightChanged();
      }
    }

    Q_PROPERTY(QString right READ right WRITE setRight NOTIFY RightChanged)
    Q_PROPERTY(bool isRightImmutable READ isRightImmutable CONSTANT)
    /**
      Get Right
    */
    static
    QString right()
    {
      return self()->mRight;
    }

    /**
      Is Right Immutable
    */
    static
    bool isRightImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Right" ) );
    }

    /**
      Get Right default value
    */
    static
    QString defaultRightValue()
    {
        return defaultRightValue_helper();
    }

    /**
      Set Rightx2
    */
    static
    void setRightx2( const QString & v )
    {
      if (v != self()->mRightx2 && !self()->isRightx2Immutable()) {
        self()->mRightx2 = v;
        Q_EMIT self()->Rightx2Changed();
      }
    }

    Q_PROPERTY(QString rightx2 READ rightx2 WRITE setRightx2 NOTIFY Rightx2Changed)
    Q_PROPERTY(bool isRightx2Immutable READ isRightx2Immutable CONSTANT)
    /**
      Get Rightx2
    */
    static
    QString rightx2()
    {
      return self()->mRightx2;
    }

    /**
      Is Rightx2 Immutable
    */
    static
    bool isRightx2Immutable()
    {
      return self()->isImmutable( QStringLiteral( "Rightx2" ) );
    }

    /**
      Set ScrollUp
    */
    static
    void setScrollUp( const QString & v )
    {
      if (v != self()->mScrollUp && !self()->isScrollUpImmutable()) {
        self()->mScrollUp = v;
        Q_EMIT self()->ScrollUpChanged();
      }
    }

    Q_PROPERTY(QString scrollUp READ scrollUp WRITE setScrollUp NOTIFY ScrollUpChanged)
    Q_PROPERTY(bool isScrollUpImmutable READ isScrollUpImmutable CONSTANT)
    /**
      Get ScrollUp
    */
    static
    QString scrollUp()
    {
      return self()->mScrollUp;
    }

    /**
      Is ScrollUp Immutable
    */
    static
    bool isScrollUpImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ScrollUp" ) );
    }

    /**
      Get ScrollUp default value
    */
    static
    QString defaultScrollUpValue()
    {
        return defaultScrollUpValue_helper();
    }

    /**
      Set ScrollDown
    */
    static
    void setScrollDown( const QString & v )
    {
      if (v != self()->mScrollDown && !self()->isScrollDownImmutable()) {
        self()->mScrollDown = v;
        Q_EMIT self()->ScrollDownChanged();
      }
    }

    Q_PROPERTY(QString scrollDown READ scrollDown WRITE setScrollDown NOTIFY ScrollDownChanged)
    Q_PROPERTY(bool isScrollDownImmutable READ isScrollDownImmutable CONSTANT)
    /**
      Get ScrollDown
    */
    static
    QString scrollDown()
    {
      return self()->mScrollDown;
    }

    /**
      Is ScrollDown Immutable
    */
    static
    bool isScrollDownImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ScrollDown" ) );
    }

    /**
      Get ScrollDown default value
    */
    static
    QString defaultScrollDownValue()
    {
        return defaultScrollDownValue_helper();
    }


    enum {
      signalLeftChanged = 1,
      signalLeftx2Changed = 2,
      signalMiddleChanged = 3,
      signalMiddlex2Changed = 4,
      signalRightChanged = 5,
      signalRightx2Changed = 6,
      signalScrollUpChanged = 7,
      signalScrollDownChanged = 8
    };

  Q_SIGNALS:
    void LeftChanged();

    void Leftx2Changed();

    void MiddleChanged();

    void Middlex2Changed();

    void RightChanged();

    void Rightx2Changed();

    void ScrollUpChanged();

    void ScrollDownChanged();

  private:
    void itemChanged(quint64 signalFlag);

  protected:
    MouseSettings(QObject *parent = nullptr);
    friend class MouseSettingsHelper;


    // Mouse
    QString mLeft;
    static QString defaultLeftValue_helper();
    QString mLeftx2;
    static QString defaultLeftx2Value_helper();
    QString mMiddle;
    static QString defaultMiddleValue_helper();
    QString mMiddlex2;
    static QString defaultMiddlex2Value_helper();
    QString mRight;
    static QString defaultRightValue_helper();
    QString mRightx2;
    static QString defaultRightx2Value_helper();
    QString mScrollUp;
    static QString defaultScrollUpValue_helper();
    QString mScrollDown;
    static QString defaultScrollDownValue_helper();

  private:
};

#endif

