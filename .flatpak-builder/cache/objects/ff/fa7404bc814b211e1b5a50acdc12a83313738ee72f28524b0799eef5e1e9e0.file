/****************************************************************************
** Meta object code from reading C++ file 'mpvproperties.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../mpv/mpvproperties.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'mpvproperties.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSMpvPropertiesENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSMpvPropertiesENDCLASS = QtMocHelpers::stringData(
    "MpvProperties",
    "VO",
    "Pause",
    "Volume",
    "VolumeMax",
    "HardwareDecoding",
    "Position",
    "Duration",
    "Remaining",
    "Mute",
    "Deinterlace",
    "Chapter",
    "ChapterList",
    "TrackList",
    "MediaTitle",
    "AudioId",
    "AudioClientName",
    "AudioLanguage",
    "AudioFileAuto",
    "AudioPitchCorection",
    "AudioDisplay",
    "SubtitleId",
    "SecondarySubtitleId",
    "SubtitleLanguage",
    "SubtitleDelay",
    "SubtitleVisibility",
    "SubtitleScale",
    "SubtitleFilePaths",
    "SubtitleAuto",
    "SubtitleFont",
    "SubtitleFontSize",
    "SubtitleColor",
    "SubtitleShadowColor",
    "SubtitleShadowOffset",
    "SubtitleBorderColor",
    "SubtitleBorderSize",
    "SubtitleBold",
    "SubtitleItalic",
    "SubtitleUseMargins",
    "SubtitleAssForceMargins",
    "ScreenshotFormat",
    "ScreenshotTemplate",
    "VideoId",
    "VideoZoom",
    "VideoPanX",
    "VideoPanY",
    "Width",
    "Height",
    "LoopFile",
    "ABLoopA",
    "ABLoopB",
    "YtdlFormat",
    "ScriptOpts",
    "ReallyQuiet",
    "AccurateSeek",
    "OsdLevel",
    "UseTextOsd",
    "Speed",
    "Contrast",
    "Brightness",
    "Gamma",
    "Saturation",
    "Terminal",
    "AspectRatio",
    "TracksCount"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSMpvPropertiesENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
      64,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags, notifyId, revision
       1, QMetaType::QString, 0x00015401, uint(-1), 0,
       2, QMetaType::QString, 0x00015401, uint(-1), 0,
       3, QMetaType::QString, 0x00015401, uint(-1), 0,
       4, QMetaType::QString, 0x00015401, uint(-1), 0,
       5, QMetaType::QString, 0x00015401, uint(-1), 0,
       6, QMetaType::QString, 0x00015401, uint(-1), 0,
       7, QMetaType::QString, 0x00015401, uint(-1), 0,
       8, QMetaType::QString, 0x00015401, uint(-1), 0,
       9, QMetaType::QString, 0x00015401, uint(-1), 0,
      10, QMetaType::QString, 0x00015401, uint(-1), 0,
      11, QMetaType::QString, 0x00015401, uint(-1), 0,
      12, QMetaType::QString, 0x00015401, uint(-1), 0,
      13, QMetaType::QString, 0x00015401, uint(-1), 0,
      14, QMetaType::QString, 0x00015401, uint(-1), 0,
      15, QMetaType::QString, 0x00015401, uint(-1), 0,
      16, QMetaType::QString, 0x00015401, uint(-1), 0,
      17, QMetaType::QString, 0x00015401, uint(-1), 0,
      18, QMetaType::QString, 0x00015401, uint(-1), 0,
      19, QMetaType::QString, 0x00015401, uint(-1), 0,
      20, QMetaType::QString, 0x00015401, uint(-1), 0,
      21, QMetaType::QString, 0x00015401, uint(-1), 0,
      22, QMetaType::QString, 0x00015401, uint(-1), 0,
      23, QMetaType::QString, 0x00015401, uint(-1), 0,
      24, QMetaType::QString, 0x00015401, uint(-1), 0,
      25, QMetaType::QString, 0x00015401, uint(-1), 0,
      26, QMetaType::QString, 0x00015401, uint(-1), 0,
      27, QMetaType::QString, 0x00015401, uint(-1), 0,
      28, QMetaType::QString, 0x00015401, uint(-1), 0,
      29, QMetaType::QString, 0x00015401, uint(-1), 0,
      30, QMetaType::QString, 0x00015401, uint(-1), 0,
      31, QMetaType::QString, 0x00015401, uint(-1), 0,
      32, QMetaType::QString, 0x00015401, uint(-1), 0,
      33, QMetaType::QString, 0x00015401, uint(-1), 0,
      34, QMetaType::QString, 0x00015401, uint(-1), 0,
      35, QMetaType::QString, 0x00015401, uint(-1), 0,
      36, QMetaType::QString, 0x00015401, uint(-1), 0,
      37, QMetaType::QString, 0x00015401, uint(-1), 0,
      38, QMetaType::QString, 0x00015401, uint(-1), 0,
      39, QMetaType::QString, 0x00015401, uint(-1), 0,
      40, QMetaType::QString, 0x00015401, uint(-1), 0,
      41, QMetaType::QString, 0x00015401, uint(-1), 0,
      42, QMetaType::QString, 0x00015401, uint(-1), 0,
      43, QMetaType::QString, 0x00015401, uint(-1), 0,
      44, QMetaType::QString, 0x00015401, uint(-1), 0,
      45, QMetaType::QString, 0x00015401, uint(-1), 0,
      46, QMetaType::QString, 0x00015401, uint(-1), 0,
      47, QMetaType::QString, 0x00015401, uint(-1), 0,
      48, QMetaType::QString, 0x00015401, uint(-1), 0,
      49, QMetaType::QString, 0x00015401, uint(-1), 0,
      50, QMetaType::QString, 0x00015401, uint(-1), 0,
      51, QMetaType::QString, 0x00015401, uint(-1), 0,
      52, QMetaType::QString, 0x00015401, uint(-1), 0,
      53, QMetaType::QString, 0x00015401, uint(-1), 0,
      54, QMetaType::QString, 0x00015401, uint(-1), 0,
      55, QMetaType::QString, 0x00015401, uint(-1), 0,
      56, QMetaType::QString, 0x00015401, uint(-1), 0,
      57, QMetaType::QString, 0x00015401, uint(-1), 0,
      58, QMetaType::QString, 0x00015401, uint(-1), 0,
      59, QMetaType::QString, 0x00015401, uint(-1), 0,
      60, QMetaType::QString, 0x00015401, uint(-1), 0,
      61, QMetaType::QString, 0x00015401, uint(-1), 0,
      62, QMetaType::QString, 0x00015401, uint(-1), 0,
      63, QMetaType::QString, 0x00015401, uint(-1), 0,
      64, QMetaType::QString, 0x00015401, uint(-1), 0,

       0        // eod
};

Q_CONSTINIT const QMetaObject MpvProperties::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSMpvPropertiesENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSMpvPropertiesENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSMpvPropertiesENDCLASS_t,
        // property 'VO'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Pause'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Volume'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'VolumeMax'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'HardwareDecoding'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Position'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Duration'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Remaining'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Mute'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Deinterlace'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Chapter'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ChapterList'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'TrackList'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'MediaTitle'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AudioId'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AudioClientName'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AudioLanguage'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AudioFileAuto'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AudioPitchCorection'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AudioDisplay'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleId'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SecondarySubtitleId'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleLanguage'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleDelay'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleVisibility'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleScale'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleFilePaths'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleAuto'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleFont'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleFontSize'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleColor'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleShadowColor'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleShadowOffset'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleBorderColor'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleBorderSize'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleBold'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleItalic'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleUseMargins'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'SubtitleAssForceMargins'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ScreenshotFormat'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ScreenshotTemplate'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'VideoId'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'VideoZoom'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'VideoPanX'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'VideoPanY'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Width'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Height'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'LoopFile'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ABLoopA'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ABLoopB'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'YtdlFormat'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ScriptOpts'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'ReallyQuiet'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AccurateSeek'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'OsdLevel'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'UseTextOsd'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Speed'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Contrast'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Brightness'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Gamma'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Saturation'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Terminal'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'AspectRatio'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'TracksCount'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<MpvProperties, std::true_type>
    >,
    nullptr
} };

void MpvProperties::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<MpvProperties *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->Pause; break;
        case 1: *reinterpret_cast< QString*>(_v) = _t->Pause; break;
        case 2: *reinterpret_cast< QString*>(_v) = _t->Volume; break;
        case 3: *reinterpret_cast< QString*>(_v) = _t->VolumeMax; break;
        case 4: *reinterpret_cast< QString*>(_v) = _t->HardwareDecoding; break;
        case 5: *reinterpret_cast< QString*>(_v) = _t->Position; break;
        case 6: *reinterpret_cast< QString*>(_v) = _t->Duration; break;
        case 7: *reinterpret_cast< QString*>(_v) = _t->Remaining; break;
        case 8: *reinterpret_cast< QString*>(_v) = _t->Mute; break;
        case 9: *reinterpret_cast< QString*>(_v) = _t->Deinterlace; break;
        case 10: *reinterpret_cast< QString*>(_v) = _t->Chapter; break;
        case 11: *reinterpret_cast< QString*>(_v) = _t->ChapterList; break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->TrackList; break;
        case 13: *reinterpret_cast< QString*>(_v) = _t->MediaTitle; break;
        case 14: *reinterpret_cast< QString*>(_v) = _t->AudioId; break;
        case 15: *reinterpret_cast< QString*>(_v) = _t->AudioClientName; break;
        case 16: *reinterpret_cast< QString*>(_v) = _t->AudioLanguage; break;
        case 17: *reinterpret_cast< QString*>(_v) = _t->AudioFileAuto; break;
        case 18: *reinterpret_cast< QString*>(_v) = _t->AudioPitchCorection; break;
        case 19: *reinterpret_cast< QString*>(_v) = _t->AudioDisplay; break;
        case 20: *reinterpret_cast< QString*>(_v) = _t->SubtitleId; break;
        case 21: *reinterpret_cast< QString*>(_v) = _t->SecondarySubtitleId; break;
        case 22: *reinterpret_cast< QString*>(_v) = _t->SubtitleLanguage; break;
        case 23: *reinterpret_cast< QString*>(_v) = _t->SubtitleDelay; break;
        case 24: *reinterpret_cast< QString*>(_v) = _t->SubtitleVisibility; break;
        case 25: *reinterpret_cast< QString*>(_v) = _t->SubtitleScale; break;
        case 26: *reinterpret_cast< QString*>(_v) = _t->SubtitleFilePaths; break;
        case 27: *reinterpret_cast< QString*>(_v) = _t->SubtitleAuto; break;
        case 28: *reinterpret_cast< QString*>(_v) = _t->SubtitleFont; break;
        case 29: *reinterpret_cast< QString*>(_v) = _t->SubtitleFontSize; break;
        case 30: *reinterpret_cast< QString*>(_v) = _t->SubtitleColor; break;
        case 31: *reinterpret_cast< QString*>(_v) = _t->SubtitleShadowColor; break;
        case 32: *reinterpret_cast< QString*>(_v) = _t->SubtitleShadowOffset; break;
        case 33: *reinterpret_cast< QString*>(_v) = _t->SubtitleBorderColor; break;
        case 34: *reinterpret_cast< QString*>(_v) = _t->SubtitleBorderSize; break;
        case 35: *reinterpret_cast< QString*>(_v) = _t->SubtitleBold; break;
        case 36: *reinterpret_cast< QString*>(_v) = _t->SubtitleItalic; break;
        case 37: *reinterpret_cast< QString*>(_v) = _t->SubtitleUseMargins; break;
        case 38: *reinterpret_cast< QString*>(_v) = _t->SubtitleAssForceMargins; break;
        case 39: *reinterpret_cast< QString*>(_v) = _t->ScreenshotFormat; break;
        case 40: *reinterpret_cast< QString*>(_v) = _t->ScreenshotTemplate; break;
        case 41: *reinterpret_cast< QString*>(_v) = _t->VideoId; break;
        case 42: *reinterpret_cast< QString*>(_v) = _t->VideoZoom; break;
        case 43: *reinterpret_cast< QString*>(_v) = _t->VideoPanX; break;
        case 44: *reinterpret_cast< QString*>(_v) = _t->VideoPanY; break;
        case 45: *reinterpret_cast< QString*>(_v) = _t->Width; break;
        case 46: *reinterpret_cast< QString*>(_v) = _t->Height; break;
        case 47: *reinterpret_cast< QString*>(_v) = _t->LoopFile; break;
        case 48: *reinterpret_cast< QString*>(_v) = _t->ABLoopA; break;
        case 49: *reinterpret_cast< QString*>(_v) = _t->ABLoopB; break;
        case 50: *reinterpret_cast< QString*>(_v) = _t->YtdlFormat; break;
        case 51: *reinterpret_cast< QString*>(_v) = _t->ScriptOpts; break;
        case 52: *reinterpret_cast< QString*>(_v) = _t->ReallyQuiet; break;
        case 53: *reinterpret_cast< QString*>(_v) = _t->AccurateSeek; break;
        case 54: *reinterpret_cast< QString*>(_v) = _t->OsdLevel; break;
        case 55: *reinterpret_cast< QString*>(_v) = _t->UseTextOsd; break;
        case 56: *reinterpret_cast< QString*>(_v) = _t->Speed; break;
        case 57: *reinterpret_cast< QString*>(_v) = _t->Contrast; break;
        case 58: *reinterpret_cast< QString*>(_v) = _t->Brightness; break;
        case 59: *reinterpret_cast< QString*>(_v) = _t->Gamma; break;
        case 60: *reinterpret_cast< QString*>(_v) = _t->Saturation; break;
        case 61: *reinterpret_cast< QString*>(_v) = _t->Terminal; break;
        case 62: *reinterpret_cast< QString*>(_v) = _t->AspectRatio; break;
        case 63: *reinterpret_cast< QString*>(_v) = _t->TracksCount; break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
    (void)_o;
    (void)_id;
    (void)_c;
    (void)_a;
}

const QMetaObject *MpvProperties::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MpvProperties::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSMpvPropertiesENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MpvProperties::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 64;
    }
    return _id;
}
QT_WARNING_POP
