/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.freedesktop.ScreenSaver.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SCREENSAVERDBUSINTERFACE_H
#define SCREENSAVERDBUSINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.DBus.Introspectable
 */
class OrgFreedesktopDBusIntrospectableInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Introspectable"; }

public:
    OrgFreedesktopDBusIntrospectableInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopDBusIntrospectableInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Introspect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Introspect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.freedesktop.DBus.Peer
 */
class OrgFreedesktopDBusPeerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Peer"; }

public:
    OrgFreedesktopDBusPeerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopDBusPeerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetMachineId()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetMachineId"), argumentList);
    }

    inline QDBusPendingReply<> Ping()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Ping"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.freedesktop.DBus.Properties
 */
class OrgFreedesktopDBusPropertiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OrgFreedesktopDBusPropertiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopDBusPropertiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface_name, const QString &property_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name);
        return asyncCallWithArgumentList(QStringLiteral("Get"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetAll(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QStringLiteral("GetAll"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &interface_name, const QString &property_name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertiesChanged(const QString &interface_name, const QVariantMap &changed_properties, const QStringList &invalidated_properties);
};

/*
 * Proxy class for interface org.freedesktop.ScreenSaver
 */
class OrgFreedesktopScreenSaverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.ScreenSaver"; }

public:
    OrgFreedesktopScreenSaverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopScreenSaverInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> GetActive()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetActive"), argumentList);
    }

    inline QDBusPendingReply<uint> GetActiveTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetActiveTime"), argumentList);
    }

    inline QDBusPendingReply<uint> GetSessionIdleTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSessionIdleTime"), argumentList);
    }

    inline QDBusPendingReply<uint> Inhibit(const QString &application_name, const QString &reason_for_inhibit)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(application_name) << QVariant::fromValue(reason_for_inhibit);
        return asyncCallWithArgumentList(QStringLiteral("Inhibit"), argumentList);
    }

    inline QDBusPendingReply<> Lock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Lock"), argumentList);
    }

    inline QDBusPendingReply<bool> SetActive(bool e)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(e);
        return asyncCallWithArgumentList(QStringLiteral("SetActive"), argumentList);
    }

    inline QDBusPendingReply<> SimulateUserActivity()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SimulateUserActivity"), argumentList);
    }

    inline QDBusPendingReply<uint> Throttle(const QString &application_name, const QString &reason_for_inhibit)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(application_name) << QVariant::fromValue(reason_for_inhibit);
        return asyncCallWithArgumentList(QStringLiteral("Throttle"), argumentList);
    }

    inline QDBusPendingReply<> UnInhibit(uint cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cookie);
        return asyncCallWithArgumentList(QStringLiteral("UnInhibit"), argumentList);
    }

    inline QDBusPendingReply<> UnThrottle(uint cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cookie);
        return asyncCallWithArgumentList(QStringLiteral("UnThrottle"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActiveChanged(bool in0);
};

/*
 * Proxy class for interface org.kde.screensaver
 */
class OrgKdeScreensaverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.screensaver"; }

public:
    OrgKdeScreensaverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeScreensaverInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> SwitchUser()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SwitchUser"), argumentList);
    }

    inline QDBusPendingReply<> configure()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("configure"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace freedesktop {
    namespace DBus {
      using Introspectable = ::OrgFreedesktopDBusIntrospectableInterface;
      using Peer = ::OrgFreedesktopDBusPeerInterface;
      using Properties = ::OrgFreedesktopDBusPropertiesInterface;
    }
    using ScreenSaver = ::OrgFreedesktopScreenSaverInterface;
  }
  namespace kde {
    using screensaver = ::OrgKdeScreensaverInterface;
  }
}
#endif
