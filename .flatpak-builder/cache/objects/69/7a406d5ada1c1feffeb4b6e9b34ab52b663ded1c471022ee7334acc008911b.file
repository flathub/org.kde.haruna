/****************************************************************************
** Meta object code from reading C++ file 'mpvitem.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../mpv/mpvitem.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'mpvitem.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSMpvItemENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSMpvItemENDCLASS = QtMocHelpers::stringData(
    "MpvItem",
    "QML.Element",
    "auto",
    "audioTracksModelChanged",
    "",
    "subtitleTracksModelChanged",
    "playlistModelChanged",
    "playlistProxyModelChanged",
    "chaptersModelChanged",
    "finishedLoadingChanged",
    "playlistTitleChanged",
    "playlistUrlChanged",
    "isFileReloadedChanged",
    "mediaTitleChanged",
    "currentUrlChanged",
    "watchPercentageChanged",
    "positionChanged",
    "watchLaterPositionChanged",
    "durationChanged",
    "remainingChanged",
    "pauseChanged",
    "muteChanged",
    "volumeChanged",
    "volumeMaxChanged",
    "chapterChanged",
    "chapterListChanged",
    "audioIdChanged",
    "subtitleIdChanged",
    "secondarySubtitleIdChanged",
    "isReadyChanged",
    "fileStarted",
    "fileLoaded",
    "videoReconfig",
    "videoWidthChanged",
    "videoHeightChanged",
    "syncConfigValue",
    "path",
    "group",
    "key",
    "QVariant",
    "value",
    "osdMessage",
    "text",
    "addToRecentFiles",
    "url",
    "raise",
    "playNext",
    "playPrevious",
    "openUri",
    "uri",
    "loadFile",
    "file",
    "userCommand",
    "commandString",
    "playlistModel",
    "PlaylistModel*",
    "playlistProxyModel",
    "PlaylistProxyModel*",
    "audioTracksModel",
    "TracksModel*",
    "subtitleTracksModel",
    "chaptersModel",
    "ChaptersModel*",
    "isFileReloaded",
    "mediaTitle",
    "position",
    "duration",
    "remaining",
    "formattedPosition",
    "formattedDuration",
    "formattedRemaining",
    "watchLaterPosition",
    "watchPercentage",
    "pause",
    "mute",
    "volume",
    "volumeMax",
    "chapter",
    "audioId",
    "subtitleId",
    "secondarySubtitleId",
    "videoWidth",
    "videoHeight",
    "finishedLoading",
    "currentUrl",
    "isReady",
    "AsyncIds",
    "None",
    "SavePosition",
    "Screenshot",
    "TrackList",
    "ChapterList",
    "VideoId"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSMpvItemENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       1,   14, // classinfo
      40,   16, // methods
      28,  314, // properties
       1,  454, // enums/sets
       0,    0, // constructors
       0,       // flags
      38,       // signalCount

 // classinfo: key, value
       1,    2,

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       3,    0,  256,    4, 0x06,   30 /* Public */,
       5,    0,  257,    4, 0x06,   31 /* Public */,
       6,    0,  258,    4, 0x06,   32 /* Public */,
       7,    0,  259,    4, 0x06,   33 /* Public */,
       8,    0,  260,    4, 0x06,   34 /* Public */,
       9,    0,  261,    4, 0x06,   35 /* Public */,
      10,    0,  262,    4, 0x06,   36 /* Public */,
      11,    0,  263,    4, 0x06,   37 /* Public */,
      12,    0,  264,    4, 0x06,   38 /* Public */,
      13,    0,  265,    4, 0x06,   39 /* Public */,
      14,    0,  266,    4, 0x06,   40 /* Public */,
      15,    0,  267,    4, 0x06,   41 /* Public */,
      16,    0,  268,    4, 0x06,   42 /* Public */,
      17,    0,  269,    4, 0x06,   43 /* Public */,
      18,    0,  270,    4, 0x06,   44 /* Public */,
      19,    0,  271,    4, 0x06,   45 /* Public */,
      20,    0,  272,    4, 0x06,   46 /* Public */,
      21,    0,  273,    4, 0x06,   47 /* Public */,
      22,    0,  274,    4, 0x06,   48 /* Public */,
      23,    0,  275,    4, 0x06,   49 /* Public */,
      24,    0,  276,    4, 0x06,   50 /* Public */,
      25,    0,  277,    4, 0x06,   51 /* Public */,
      26,    0,  278,    4, 0x06,   52 /* Public */,
      27,    0,  279,    4, 0x06,   53 /* Public */,
      28,    0,  280,    4, 0x06,   54 /* Public */,
      29,    0,  281,    4, 0x06,   55 /* Public */,
      30,    0,  282,    4, 0x06,   56 /* Public */,
      31,    0,  283,    4, 0x06,   57 /* Public */,
      32,    0,  284,    4, 0x06,   58 /* Public */,
      33,    0,  285,    4, 0x06,   59 /* Public */,
      34,    0,  286,    4, 0x06,   60 /* Public */,
      35,    4,  287,    4, 0x06,   61 /* Public */,
      41,    1,  296,    4, 0x06,   66 /* Public */,
      43,    1,  299,    4, 0x06,   68 /* Public */,
      45,    0,  302,    4, 0x06,   70 /* Public */,
      46,    0,  303,    4, 0x06,   71 /* Public */,
      47,    0,  304,    4, 0x06,   72 /* Public */,
      48,    1,  305,    4, 0x06,   73 /* Public */,

 // methods: name, argc, parameters, tag, flags, initial metatype offsets
      50,    1,  308,    4, 0x02,   75 /* Public */,
      52,    1,  311,    4, 0x02,   77 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString, QMetaType::QString, QMetaType::QString, 0x80000000 | 39,   36,   37,   38,   40,
    QMetaType::Void, QMetaType::QString,   42,
    QMetaType::Void, QMetaType::QUrl,   44,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString,   49,

 // methods: parameters
    QMetaType::Void, QMetaType::QString,   51,
    QMetaType::Void, QMetaType::QString,   53,

 // properties: name, type, flags, notifyId, revision
      54, 0x80000000 | 55, 0x0001510b, uint(2), 0,
      56, 0x80000000 | 57, 0x0001510b, uint(3), 0,
      58, 0x80000000 | 59, 0x00015009, uint(0), 0,
      60, 0x80000000 | 59, 0x00015009, uint(1), 0,
      61, 0x80000000 | 62, 0x0001510b, uint(4), 0,
      63, QMetaType::Bool, 0x00015103, uint(8), 0,
      64, QMetaType::QString, 0x00015001, uint(9), 0,
      65, QMetaType::Double, 0x00015103, uint(12), 0,
      66, QMetaType::Double, 0x00015001, uint(14), 0,
      67, QMetaType::Double, 0x00015001, uint(15), 0,
      68, QMetaType::QString, 0x00015001, uint(12), 0,
      69, QMetaType::QString, 0x00015001, uint(14), 0,
      70, QMetaType::QString, 0x00015001, uint(15), 0,
      71, QMetaType::Double, 0x00015103, uint(13), 0,
      72, QMetaType::Double, 0x00015103, uint(11), 0,
      73, QMetaType::Bool, 0x00015103, uint(16), 0,
      74, QMetaType::Bool, 0x00015103, uint(17), 0,
      75, QMetaType::Int, 0x00015103, uint(18), 0,
      76, QMetaType::Int, 0x00015103, uint(19), 0,
      77, QMetaType::Int, 0x00015103, uint(20), 0,
      78, QMetaType::Int, 0x00015103, uint(22), 0,
      79, QMetaType::Int, 0x00015103, uint(23), 0,
      80, QMetaType::Int, 0x00015103, uint(24), 0,
      81, QMetaType::Int, 0x00015001, uint(29), 0,
      82, QMetaType::Int, 0x00015001, uint(30), 0,
      83, QMetaType::Bool, 0x00015103, uint(5), 0,
      84, QMetaType::QUrl, 0x00015001, uint(10), 0,
      85, QMetaType::Bool, 0x00015103, uint(25), 0,

 // enums: name, alias, flags, count, data
      86,   86, 0x2,    6,  459,

 // enum data: key, value
      87, uint(MpvItem::AsyncIds::None),
      88, uint(MpvItem::AsyncIds::SavePosition),
      89, uint(MpvItem::AsyncIds::Screenshot),
      90, uint(MpvItem::AsyncIds::TrackList),
      91, uint(MpvItem::AsyncIds::ChapterList),
      92, uint(MpvItem::AsyncIds::VideoId),

       0        // eod
};

Q_CONSTINIT const QMetaObject MpvItem::staticMetaObject = { {
    QMetaObject::SuperData::link<MpvAbstractItem::staticMetaObject>(),
    qt_meta_stringdata_CLASSMpvItemENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSMpvItemENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_metaTypeArray<
        // property 'playlistModel'
        PlaylistModel*,
        // property 'playlistProxyModel'
        PlaylistProxyModel*,
        // property 'audioTracksModel'
        TracksModel*,
        // property 'subtitleTracksModel'
        TracksModel*,
        // property 'chaptersModel'
        ChaptersModel*,
        // property 'isFileReloaded'
        bool,
        // property 'mediaTitle'
        QString,
        // property 'position'
        double,
        // property 'duration'
        double,
        // property 'remaining'
        double,
        // property 'formattedPosition'
        QString,
        // property 'formattedDuration'
        QString,
        // property 'formattedRemaining'
        QString,
        // property 'watchLaterPosition'
        double,
        // property 'watchPercentage'
        double,
        // property 'pause'
        bool,
        // property 'mute'
        bool,
        // property 'volume'
        int,
        // property 'volumeMax'
        int,
        // property 'chapter'
        int,
        // property 'audioId'
        int,
        // property 'subtitleId'
        int,
        // property 'secondarySubtitleId'
        int,
        // property 'videoWidth'
        int,
        // property 'videoHeight'
        int,
        // property 'finishedLoading'
        bool,
        // property 'currentUrl'
        QUrl,
        // property 'isReady'
        bool,
        // enum 'AsyncIds'
        MpvItem::AsyncIds,
        // Q_OBJECT / Q_GADGET
        MpvItem,
        // method 'audioTracksModelChanged'
        void,
        // method 'subtitleTracksModelChanged'
        void,
        // method 'playlistModelChanged'
        void,
        // method 'playlistProxyModelChanged'
        void,
        // method 'chaptersModelChanged'
        void,
        // method 'finishedLoadingChanged'
        void,
        // method 'playlistTitleChanged'
        void,
        // method 'playlistUrlChanged'
        void,
        // method 'isFileReloadedChanged'
        void,
        // method 'mediaTitleChanged'
        void,
        // method 'currentUrlChanged'
        void,
        // method 'watchPercentageChanged'
        void,
        // method 'positionChanged'
        void,
        // method 'watchLaterPositionChanged'
        void,
        // method 'durationChanged'
        void,
        // method 'remainingChanged'
        void,
        // method 'pauseChanged'
        void,
        // method 'muteChanged'
        void,
        // method 'volumeChanged'
        void,
        // method 'volumeMaxChanged'
        void,
        // method 'chapterChanged'
        void,
        // method 'chapterListChanged'
        void,
        // method 'audioIdChanged'
        void,
        // method 'subtitleIdChanged'
        void,
        // method 'secondarySubtitleIdChanged'
        void,
        // method 'isReadyChanged'
        void,
        // method 'fileStarted'
        void,
        // method 'fileLoaded'
        void,
        // method 'videoReconfig'
        void,
        // method 'videoWidthChanged'
        void,
        // method 'videoHeightChanged'
        void,
        // method 'syncConfigValue'
        void,
        QString,
        QString,
        QString,
        QVariant,
        // method 'osdMessage'
        void,
        const QString &,
        // method 'addToRecentFiles'
        void,
        const QUrl &,
        // method 'raise'
        void,
        // method 'playNext'
        void,
        // method 'playPrevious'
        void,
        // method 'openUri'
        void,
        const QString &,
        // method 'loadFile'
        void,
        const QString &,
        // method 'userCommand'
        void,
        const QString &
    >,
    nullptr
} };

void MpvItem::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<MpvItem *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->audioTracksModelChanged(); break;
        case 1: _t->subtitleTracksModelChanged(); break;
        case 2: _t->playlistModelChanged(); break;
        case 3: _t->playlistProxyModelChanged(); break;
        case 4: _t->chaptersModelChanged(); break;
        case 5: _t->finishedLoadingChanged(); break;
        case 6: _t->playlistTitleChanged(); break;
        case 7: _t->playlistUrlChanged(); break;
        case 8: _t->isFileReloadedChanged(); break;
        case 9: _t->mediaTitleChanged(); break;
        case 10: _t->currentUrlChanged(); break;
        case 11: _t->watchPercentageChanged(); break;
        case 12: _t->positionChanged(); break;
        case 13: _t->watchLaterPositionChanged(); break;
        case 14: _t->durationChanged(); break;
        case 15: _t->remainingChanged(); break;
        case 16: _t->pauseChanged(); break;
        case 17: _t->muteChanged(); break;
        case 18: _t->volumeChanged(); break;
        case 19: _t->volumeMaxChanged(); break;
        case 20: _t->chapterChanged(); break;
        case 21: _t->chapterListChanged(); break;
        case 22: _t->audioIdChanged(); break;
        case 23: _t->subtitleIdChanged(); break;
        case 24: _t->secondarySubtitleIdChanged(); break;
        case 25: _t->isReadyChanged(); break;
        case 26: _t->fileStarted(); break;
        case 27: _t->fileLoaded(); break;
        case 28: _t->videoReconfig(); break;
        case 29: _t->videoWidthChanged(); break;
        case 30: _t->videoHeightChanged(); break;
        case 31: _t->syncConfigValue((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[3])),(*reinterpret_cast< std::add_pointer_t<QVariant>>(_a[4]))); break;
        case 32: _t->osdMessage((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 33: _t->addToRecentFiles((*reinterpret_cast< std::add_pointer_t<QUrl>>(_a[1]))); break;
        case 34: _t->raise(); break;
        case 35: _t->playNext(); break;
        case 36: _t->playPrevious(); break;
        case 37: _t->openUri((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 38: _t->loadFile((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 39: _t->userCommand((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::audioTracksModelChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::subtitleTracksModelChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::playlistModelChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::playlistProxyModelChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::chaptersModelChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::finishedLoadingChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::playlistTitleChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::playlistUrlChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::isFileReloadedChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::mediaTitleChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::currentUrlChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 10;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::watchPercentageChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 11;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::positionChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 12;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::watchLaterPositionChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 13;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::durationChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 14;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::remainingChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 15;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::pauseChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 16;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::muteChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 17;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::volumeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 18;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::volumeMaxChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 19;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::chapterChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 20;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::chapterListChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 21;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::audioIdChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 22;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::subtitleIdChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 23;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::secondarySubtitleIdChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 24;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::isReadyChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 25;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::fileStarted; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 26;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::fileLoaded; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 27;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::videoReconfig; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 28;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::videoWidthChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 29;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::videoHeightChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 30;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)(QString , QString , QString , QVariant );
            if (_t _q_method = &MpvItem::syncConfigValue; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 31;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)(const QString & );
            if (_t _q_method = &MpvItem::osdMessage; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 32;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)(const QUrl & );
            if (_t _q_method = &MpvItem::addToRecentFiles; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 33;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::raise; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 34;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::playNext; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 35;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)();
            if (_t _q_method = &MpvItem::playPrevious; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 36;
                return;
            }
        }
        {
            using _t = void (MpvItem::*)(const QString & );
            if (_t _q_method = &MpvItem::openUri; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 37;
                return;
            }
        }
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<MpvItem *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< PlaylistModel**>(_v) = _t->playlistModel(); break;
        case 1: *reinterpret_cast< PlaylistProxyModel**>(_v) = _t->playlistProxyModel(); break;
        case 2: *reinterpret_cast< TracksModel**>(_v) = _t->audioTracksModel(); break;
        case 3: *reinterpret_cast< TracksModel**>(_v) = _t->subtitleTracksModel(); break;
        case 4: *reinterpret_cast< ChaptersModel**>(_v) = _t->chaptersModel(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isFileReloaded(); break;
        case 6: *reinterpret_cast< QString*>(_v) = _t->mediaTitle(); break;
        case 7: *reinterpret_cast< double*>(_v) = _t->position(); break;
        case 8: *reinterpret_cast< double*>(_v) = _t->duration(); break;
        case 9: *reinterpret_cast< double*>(_v) = _t->remaining(); break;
        case 10: *reinterpret_cast< QString*>(_v) = _t->formattedPosition(); break;
        case 11: *reinterpret_cast< QString*>(_v) = _t->formattedDuration(); break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->formattedRemaining(); break;
        case 13: *reinterpret_cast< double*>(_v) = _t->watchLaterPosition(); break;
        case 14: *reinterpret_cast< double*>(_v) = _t->watchPercentage(); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->pause(); break;
        case 16: *reinterpret_cast< bool*>(_v) = _t->mute(); break;
        case 17: *reinterpret_cast< int*>(_v) = _t->volume(); break;
        case 18: *reinterpret_cast< int*>(_v) = _t->volumeMax(); break;
        case 19: *reinterpret_cast< int*>(_v) = _t->chapter(); break;
        case 20: *reinterpret_cast< int*>(_v) = _t->audioId(); break;
        case 21: *reinterpret_cast< int*>(_v) = _t->subtitleId(); break;
        case 22: *reinterpret_cast< int*>(_v) = _t->secondarySubtitleId(); break;
        case 23: *reinterpret_cast< int*>(_v) = _t->videoWidth(); break;
        case 24: *reinterpret_cast< int*>(_v) = _t->videoHeight(); break;
        case 25: *reinterpret_cast< bool*>(_v) = _t->finishedLoading(); break;
        case 26: *reinterpret_cast< QUrl*>(_v) = _t->currentUrl(); break;
        case 27: *reinterpret_cast< bool*>(_v) = _t->isReady(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<MpvItem *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setPlaylistModel(*reinterpret_cast< PlaylistModel**>(_v)); break;
        case 1: _t->setPlaylistProxyModel(*reinterpret_cast< PlaylistProxyModel**>(_v)); break;
        case 4: _t->setChaptersModel(*reinterpret_cast< ChaptersModel**>(_v)); break;
        case 5: _t->setIsFileReloaded(*reinterpret_cast< bool*>(_v)); break;
        case 7: _t->setPosition(*reinterpret_cast< double*>(_v)); break;
        case 13: _t->setWatchLaterPosition(*reinterpret_cast< double*>(_v)); break;
        case 14: _t->setWatchPercentage(*reinterpret_cast< double*>(_v)); break;
        case 15: _t->setPause(*reinterpret_cast< bool*>(_v)); break;
        case 16: _t->setMute(*reinterpret_cast< bool*>(_v)); break;
        case 17: _t->setVolume(*reinterpret_cast< int*>(_v)); break;
        case 18: _t->setVolumeMax(*reinterpret_cast< int*>(_v)); break;
        case 19: _t->setChapter(*reinterpret_cast< int*>(_v)); break;
        case 20: _t->setAudioId(*reinterpret_cast< int*>(_v)); break;
        case 21: _t->setSubtitleId(*reinterpret_cast< int*>(_v)); break;
        case 22: _t->setSecondarySubtitleId(*reinterpret_cast< int*>(_v)); break;
        case 25: _t->setFinishedLoading(*reinterpret_cast< bool*>(_v)); break;
        case 27: _t->setIsReady(*reinterpret_cast< bool*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
}

const QMetaObject *MpvItem::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MpvItem::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSMpvItemENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return MpvAbstractItem::qt_metacast(_clname);
}

int MpvItem::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = MpvAbstractItem::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 40)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 40;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 40)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 40;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 28;
    }
    return _id;
}

// SIGNAL 0
void MpvItem::audioTracksModelChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void MpvItem::subtitleTracksModelChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void MpvItem::playlistModelChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void MpvItem::playlistProxyModelChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void MpvItem::chaptersModelChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void MpvItem::finishedLoadingChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}

// SIGNAL 6
void MpvItem::playlistTitleChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 6, nullptr);
}

// SIGNAL 7
void MpvItem::playlistUrlChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 7, nullptr);
}

// SIGNAL 8
void MpvItem::isFileReloadedChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 8, nullptr);
}

// SIGNAL 9
void MpvItem::mediaTitleChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 9, nullptr);
}

// SIGNAL 10
void MpvItem::currentUrlChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 10, nullptr);
}

// SIGNAL 11
void MpvItem::watchPercentageChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 11, nullptr);
}

// SIGNAL 12
void MpvItem::positionChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 12, nullptr);
}

// SIGNAL 13
void MpvItem::watchLaterPositionChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 13, nullptr);
}

// SIGNAL 14
void MpvItem::durationChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 14, nullptr);
}

// SIGNAL 15
void MpvItem::remainingChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 15, nullptr);
}

// SIGNAL 16
void MpvItem::pauseChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 16, nullptr);
}

// SIGNAL 17
void MpvItem::muteChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 17, nullptr);
}

// SIGNAL 18
void MpvItem::volumeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 18, nullptr);
}

// SIGNAL 19
void MpvItem::volumeMaxChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 19, nullptr);
}

// SIGNAL 20
void MpvItem::chapterChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 20, nullptr);
}

// SIGNAL 21
void MpvItem::chapterListChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 21, nullptr);
}

// SIGNAL 22
void MpvItem::audioIdChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 22, nullptr);
}

// SIGNAL 23
void MpvItem::subtitleIdChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 23, nullptr);
}

// SIGNAL 24
void MpvItem::secondarySubtitleIdChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 24, nullptr);
}

// SIGNAL 25
void MpvItem::isReadyChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 25, nullptr);
}

// SIGNAL 26
void MpvItem::fileStarted()
{
    QMetaObject::activate(this, &staticMetaObject, 26, nullptr);
}

// SIGNAL 27
void MpvItem::fileLoaded()
{
    QMetaObject::activate(this, &staticMetaObject, 27, nullptr);
}

// SIGNAL 28
void MpvItem::videoReconfig()
{
    QMetaObject::activate(this, &staticMetaObject, 28, nullptr);
}

// SIGNAL 29
void MpvItem::videoWidthChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 29, nullptr);
}

// SIGNAL 30
void MpvItem::videoHeightChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 30, nullptr);
}

// SIGNAL 31
void MpvItem::syncConfigValue(QString _t1, QString _t2, QString _t3, QVariant _t4)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t2))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t3))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t4))) };
    QMetaObject::activate(this, &staticMetaObject, 31, _a);
}

// SIGNAL 32
void MpvItem::osdMessage(const QString & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 32, _a);
}

// SIGNAL 33
void MpvItem::addToRecentFiles(const QUrl & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 33, _a);
}

// SIGNAL 34
void MpvItem::raise()
{
    QMetaObject::activate(this, &staticMetaObject, 34, nullptr);
}

// SIGNAL 35
void MpvItem::playNext()
{
    QMetaObject::activate(this, &staticMetaObject, 35, nullptr);
}

// SIGNAL 36
void MpvItem::playPrevious()
{
    QMetaObject::activate(this, &staticMetaObject, 36, nullptr);
}

// SIGNAL 37
void MpvItem::openUri(const QString & _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 37, _a);
}
QT_WARNING_POP
