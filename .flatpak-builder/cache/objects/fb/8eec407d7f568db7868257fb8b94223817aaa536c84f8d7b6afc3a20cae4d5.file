// This file is generated by kconfig_compiler_kf6 from audiosettings.kcfg.
// All changes you do to this file will be lost.
#ifndef AUDIOSETTINGS_H
#define AUDIOSETTINGS_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

class AudioSettings : public KConfigSkeleton
{
  Q_OBJECT
  public:

    static AudioSettings *self();
    ~AudioSettings() override;

    /**
      Set PreferredLanguage
    */
    static
    void setPreferredLanguage( const QString & v )
    {
      if (v != self()->mPreferredLanguage && !self()->isPreferredLanguageImmutable()) {
        self()->mPreferredLanguage = v;
        Q_EMIT self()->PreferredLanguageChanged();
      }
    }

    Q_PROPERTY(QString preferredLanguage READ preferredLanguage WRITE setPreferredLanguage NOTIFY PreferredLanguageChanged)
    Q_PROPERTY(bool isPreferredLanguageImmutable READ isPreferredLanguageImmutable CONSTANT)
    /**
      Get PreferredLanguage
    */
    static
    QString preferredLanguage()
    {
      return self()->mPreferredLanguage;
    }

    /**
      Is PreferredLanguage Immutable
    */
    static
    bool isPreferredLanguageImmutable()
    {
      return self()->isImmutable( QStringLiteral( "PreferredLanguage" ) );
    }

    /**
      Set PreferredTrack
    */
    static
    void setPreferredTrack( int v )
    {
      if (v != self()->mPreferredTrack && !self()->isPreferredTrackImmutable()) {
        self()->mPreferredTrack = v;
        Q_EMIT self()->PreferredTrackChanged();
      }
    }

    Q_PROPERTY(int preferredTrack READ preferredTrack WRITE setPreferredTrack NOTIFY PreferredTrackChanged)
    Q_PROPERTY(bool isPreferredTrackImmutable READ isPreferredTrackImmutable CONSTANT)
    /**
      Get PreferredTrack
    */
    static
    int preferredTrack()
    {
      return self()->mPreferredTrack;
    }

    /**
      Is PreferredTrack Immutable
    */
    static
    bool isPreferredTrackImmutable()
    {
      return self()->isImmutable( QStringLiteral( "PreferredTrack" ) );
    }

    /**
      Set Volume
    */
    static
    void setVolume( int v )
    {
      if (v != self()->mVolume && !self()->isVolumeImmutable()) {
        self()->mVolume = v;
        Q_EMIT self()->VolumeChanged();
      }
    }

    Q_PROPERTY(int volume READ volume WRITE setVolume NOTIFY VolumeChanged)
    Q_PROPERTY(bool isVolumeImmutable READ isVolumeImmutable CONSTANT)
    /**
      Get Volume
    */
    static
    int volume()
    {
      return self()->mVolume;
    }

    /**
      Is Volume Immutable
    */
    static
    bool isVolumeImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Volume" ) );
    }

    /**
      Get Volume default value
    */
    static
    int defaultVolumeValue()
    {
        return defaultVolumeValue_helper();
    }

    /**
      Set VolumeStep
    */
    static
    void setVolumeStep( int v )
    {
      if (v != self()->mVolumeStep && !self()->isVolumeStepImmutable()) {
        self()->mVolumeStep = v;
        Q_EMIT self()->VolumeStepChanged();
      }
    }

    Q_PROPERTY(int volumeStep READ volumeStep WRITE setVolumeStep NOTIFY VolumeStepChanged)
    Q_PROPERTY(bool isVolumeStepImmutable READ isVolumeStepImmutable CONSTANT)
    /**
      Get VolumeStep
    */
    static
    int volumeStep()
    {
      return self()->mVolumeStep;
    }

    /**
      Is VolumeStep Immutable
    */
    static
    bool isVolumeStepImmutable()
    {
      return self()->isImmutable( QStringLiteral( "VolumeStep" ) );
    }

    /**
      Get VolumeStep default value
    */
    static
    int defaultVolumeStepValue()
    {
        return defaultVolumeStepValue_helper();
    }


    enum {
      signalPreferredLanguageChanged = 1,
      signalPreferredTrackChanged = 2,
      signalVolumeChanged = 3,
      signalVolumeStepChanged = 4
    };

  Q_SIGNALS:
    void PreferredLanguageChanged();

    void PreferredTrackChanged();

    void VolumeChanged();

    void VolumeStepChanged();

  private:
    void itemChanged(quint64 signalFlag);

  protected:
    AudioSettings(QObject *parent = nullptr);
    friend class AudioSettingsHelper;


    // Audio
    QString mPreferredLanguage;
    static QString defaultPreferredLanguageValue_helper();
    int mPreferredTrack;
    static int defaultPreferredTrackValue_helper();
    int mVolume;
    static int defaultVolumeValue_helper();
    int mVolumeStep;
    static int defaultVolumeStepValue_helper();

  private:
};

#endif

