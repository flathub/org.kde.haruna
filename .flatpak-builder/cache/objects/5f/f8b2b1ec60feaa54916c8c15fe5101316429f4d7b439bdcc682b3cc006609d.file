/****************************************************************************
** Meta object code from reading C++ file 'playbacksettings.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../playbacksettings.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'playbacksettings.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSPlaybackSettingsENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSPlaybackSettingsENDCLASS = QtMocHelpers::stringData(
    "PlaybackSettings",
    "MinDurationToSavePositionChanged",
    "",
    "SavePositionIntervalChanged",
    "SkipChaptersChanged",
    "ChaptersToSkipChanged",
    "ShowOsdOnSkipChaptersChanged",
    "YtdlFormatChanged",
    "YtdlFormatCustomChanged",
    "UseHWDecodingChanged",
    "HWDecodingChanged",
    "SeekSmallStepChanged",
    "SeekMediumStepChanged",
    "SeekBigStepChanged",
    "SeekToLastPositionChanged",
    "OpenLastPlayedFileChanged",
    "PauseWhileMinimizedChanged",
    "PlayOnResumeChanged",
    "minDurationToSavePosition",
    "isMinDurationToSavePositionImmutable",
    "savePositionInterval",
    "isSavePositionIntervalImmutable",
    "skipChapters",
    "isSkipChaptersImmutable",
    "chaptersToSkip",
    "isChaptersToSkipImmutable",
    "showOsdOnSkipChapters",
    "isShowOsdOnSkipChaptersImmutable",
    "ytdlFormat",
    "isYtdlFormatImmutable",
    "ytdlFormatCustom",
    "isYtdlFormatCustomImmutable",
    "useHWDecoding",
    "isUseHWDecodingImmutable",
    "hWDecoding",
    "isHWDecodingImmutable",
    "seekSmallStep",
    "isSeekSmallStepImmutable",
    "seekMediumStep",
    "isSeekMediumStepImmutable",
    "seekBigStep",
    "isSeekBigStepImmutable",
    "seekToLastPosition",
    "isSeekToLastPositionImmutable",
    "openLastPlayedFile",
    "isOpenLastPlayedFileImmutable",
    "pauseWhileMinimized",
    "isPauseWhileMinimizedImmutable",
    "playOnResume",
    "isPlayOnResumeImmutable"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSPlaybackSettingsENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
      32,  126, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
      16,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  110,    2, 0x06,   33 /* Public */,
       3,    0,  111,    2, 0x06,   34 /* Public */,
       4,    0,  112,    2, 0x06,   35 /* Public */,
       5,    0,  113,    2, 0x06,   36 /* Public */,
       6,    0,  114,    2, 0x06,   37 /* Public */,
       7,    0,  115,    2, 0x06,   38 /* Public */,
       8,    0,  116,    2, 0x06,   39 /* Public */,
       9,    0,  117,    2, 0x06,   40 /* Public */,
      10,    0,  118,    2, 0x06,   41 /* Public */,
      11,    0,  119,    2, 0x06,   42 /* Public */,
      12,    0,  120,    2, 0x06,   43 /* Public */,
      13,    0,  121,    2, 0x06,   44 /* Public */,
      14,    0,  122,    2, 0x06,   45 /* Public */,
      15,    0,  123,    2, 0x06,   46 /* Public */,
      16,    0,  124,    2, 0x06,   47 /* Public */,
      17,    0,  125,    2, 0x06,   48 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // properties: name, type, flags, notifyId, revision
      18, QMetaType::Int, 0x00015103, uint(0), 0,
      19, QMetaType::Bool, 0x00015401, uint(-1), 0,
      20, QMetaType::Int, 0x00015103, uint(1), 0,
      21, QMetaType::Bool, 0x00015401, uint(-1), 0,
      22, QMetaType::Bool, 0x00015103, uint(2), 0,
      23, QMetaType::Bool, 0x00015401, uint(-1), 0,
      24, QMetaType::QString, 0x00015103, uint(3), 0,
      25, QMetaType::Bool, 0x00015401, uint(-1), 0,
      26, QMetaType::Bool, 0x00015103, uint(4), 0,
      27, QMetaType::Bool, 0x00015401, uint(-1), 0,
      28, QMetaType::QString, 0x00015103, uint(5), 0,
      29, QMetaType::Bool, 0x00015401, uint(-1), 0,
      30, QMetaType::QString, 0x00015103, uint(6), 0,
      31, QMetaType::Bool, 0x00015401, uint(-1), 0,
      32, QMetaType::Bool, 0x00015103, uint(7), 0,
      33, QMetaType::Bool, 0x00015401, uint(-1), 0,
      34, QMetaType::QString, 0x00015103, uint(8), 0,
      35, QMetaType::Bool, 0x00015401, uint(-1), 0,
      36, QMetaType::Int, 0x00015103, uint(9), 0,
      37, QMetaType::Bool, 0x00015401, uint(-1), 0,
      38, QMetaType::Int, 0x00015103, uint(10), 0,
      39, QMetaType::Bool, 0x00015401, uint(-1), 0,
      40, QMetaType::Int, 0x00015103, uint(11), 0,
      41, QMetaType::Bool, 0x00015401, uint(-1), 0,
      42, QMetaType::Bool, 0x00015103, uint(12), 0,
      43, QMetaType::Bool, 0x00015401, uint(-1), 0,
      44, QMetaType::Bool, 0x00015103, uint(13), 0,
      45, QMetaType::Bool, 0x00015401, uint(-1), 0,
      46, QMetaType::Bool, 0x00015103, uint(14), 0,
      47, QMetaType::Bool, 0x00015401, uint(-1), 0,
      48, QMetaType::Bool, 0x00015103, uint(15), 0,
      49, QMetaType::Bool, 0x00015401, uint(-1), 0,

       0        // eod
};

Q_CONSTINIT const QMetaObject PlaybackSettings::staticMetaObject = { {
    QMetaObject::SuperData::link<KConfigSkeleton::staticMetaObject>(),
    qt_meta_stringdata_CLASSPlaybackSettingsENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSPlaybackSettingsENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSPlaybackSettingsENDCLASS_t,
        // property 'minDurationToSavePosition'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isMinDurationToSavePositionImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'savePositionInterval'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isSavePositionIntervalImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'skipChapters'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isSkipChaptersImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'chaptersToSkip'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isChaptersToSkipImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'showOsdOnSkipChapters'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isShowOsdOnSkipChaptersImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'ytdlFormat'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isYtdlFormatImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'ytdlFormatCustom'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isYtdlFormatCustomImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'useHWDecoding'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isUseHWDecodingImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'hWDecoding'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isHWDecodingImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'seekSmallStep'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isSeekSmallStepImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'seekMediumStep'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isSeekMediumStepImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'seekBigStep'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isSeekBigStepImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'seekToLastPosition'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isSeekToLastPositionImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'openLastPlayedFile'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isOpenLastPlayedFileImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'pauseWhileMinimized'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isPauseWhileMinimizedImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'playOnResume'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isPlayOnResumeImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<PlaybackSettings, std::true_type>,
        // method 'MinDurationToSavePositionChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'SavePositionIntervalChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'SkipChaptersChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ChaptersToSkipChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShowOsdOnSkipChaptersChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'YtdlFormatChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'YtdlFormatCustomChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'UseHWDecodingChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'HWDecodingChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'SeekSmallStepChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'SeekMediumStepChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'SeekBigStepChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'SeekToLastPositionChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'OpenLastPlayedFileChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'PauseWhileMinimizedChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'PlayOnResumeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void PlaybackSettings::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<PlaybackSettings *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->MinDurationToSavePositionChanged(); break;
        case 1: _t->SavePositionIntervalChanged(); break;
        case 2: _t->SkipChaptersChanged(); break;
        case 3: _t->ChaptersToSkipChanged(); break;
        case 4: _t->ShowOsdOnSkipChaptersChanged(); break;
        case 5: _t->YtdlFormatChanged(); break;
        case 6: _t->YtdlFormatCustomChanged(); break;
        case 7: _t->UseHWDecodingChanged(); break;
        case 8: _t->HWDecodingChanged(); break;
        case 9: _t->SeekSmallStepChanged(); break;
        case 10: _t->SeekMediumStepChanged(); break;
        case 11: _t->SeekBigStepChanged(); break;
        case 12: _t->SeekToLastPositionChanged(); break;
        case 13: _t->OpenLastPlayedFileChanged(); break;
        case 14: _t->PauseWhileMinimizedChanged(); break;
        case 15: _t->PlayOnResumeChanged(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::MinDurationToSavePositionChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::SavePositionIntervalChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::SkipChaptersChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::ChaptersToSkipChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::ShowOsdOnSkipChaptersChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::YtdlFormatChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::YtdlFormatCustomChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::UseHWDecodingChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::HWDecodingChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::SeekSmallStepChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::SeekMediumStepChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 10;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::SeekBigStepChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 11;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::SeekToLastPositionChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 12;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::OpenLastPlayedFileChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 13;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::PauseWhileMinimizedChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 14;
                return;
            }
        }
        {
            using _t = void (PlaybackSettings::*)();
            if (_t _q_method = &PlaybackSettings::PlayOnResumeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 15;
                return;
            }
        }
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<PlaybackSettings *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< int*>(_v) = _t->minDurationToSavePosition(); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->isMinDurationToSavePositionImmutable(); break;
        case 2: *reinterpret_cast< int*>(_v) = _t->savePositionInterval(); break;
        case 3: *reinterpret_cast< bool*>(_v) = _t->isSavePositionIntervalImmutable(); break;
        case 4: *reinterpret_cast< bool*>(_v) = _t->skipChapters(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isSkipChaptersImmutable(); break;
        case 6: *reinterpret_cast< QString*>(_v) = _t->chaptersToSkip(); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->isChaptersToSkipImmutable(); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->showOsdOnSkipChapters(); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->isShowOsdOnSkipChaptersImmutable(); break;
        case 10: *reinterpret_cast< QString*>(_v) = _t->ytdlFormat(); break;
        case 11: *reinterpret_cast< bool*>(_v) = _t->isYtdlFormatImmutable(); break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->ytdlFormatCustom(); break;
        case 13: *reinterpret_cast< bool*>(_v) = _t->isYtdlFormatCustomImmutable(); break;
        case 14: *reinterpret_cast< bool*>(_v) = _t->useHWDecoding(); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->isUseHWDecodingImmutable(); break;
        case 16: *reinterpret_cast< QString*>(_v) = _t->hWDecoding(); break;
        case 17: *reinterpret_cast< bool*>(_v) = _t->isHWDecodingImmutable(); break;
        case 18: *reinterpret_cast< int*>(_v) = _t->seekSmallStep(); break;
        case 19: *reinterpret_cast< bool*>(_v) = _t->isSeekSmallStepImmutable(); break;
        case 20: *reinterpret_cast< int*>(_v) = _t->seekMediumStep(); break;
        case 21: *reinterpret_cast< bool*>(_v) = _t->isSeekMediumStepImmutable(); break;
        case 22: *reinterpret_cast< int*>(_v) = _t->seekBigStep(); break;
        case 23: *reinterpret_cast< bool*>(_v) = _t->isSeekBigStepImmutable(); break;
        case 24: *reinterpret_cast< bool*>(_v) = _t->seekToLastPosition(); break;
        case 25: *reinterpret_cast< bool*>(_v) = _t->isSeekToLastPositionImmutable(); break;
        case 26: *reinterpret_cast< bool*>(_v) = _t->openLastPlayedFile(); break;
        case 27: *reinterpret_cast< bool*>(_v) = _t->isOpenLastPlayedFileImmutable(); break;
        case 28: *reinterpret_cast< bool*>(_v) = _t->pauseWhileMinimized(); break;
        case 29: *reinterpret_cast< bool*>(_v) = _t->isPauseWhileMinimizedImmutable(); break;
        case 30: *reinterpret_cast< bool*>(_v) = _t->playOnResume(); break;
        case 31: *reinterpret_cast< bool*>(_v) = _t->isPlayOnResumeImmutable(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<PlaybackSettings *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setMinDurationToSavePosition(*reinterpret_cast< int*>(_v)); break;
        case 2: _t->setSavePositionInterval(*reinterpret_cast< int*>(_v)); break;
        case 4: _t->setSkipChapters(*reinterpret_cast< bool*>(_v)); break;
        case 6: _t->setChaptersToSkip(*reinterpret_cast< QString*>(_v)); break;
        case 8: _t->setShowOsdOnSkipChapters(*reinterpret_cast< bool*>(_v)); break;
        case 10: _t->setYtdlFormat(*reinterpret_cast< QString*>(_v)); break;
        case 12: _t->setYtdlFormatCustom(*reinterpret_cast< QString*>(_v)); break;
        case 14: _t->setUseHWDecoding(*reinterpret_cast< bool*>(_v)); break;
        case 16: _t->setHWDecoding(*reinterpret_cast< QString*>(_v)); break;
        case 18: _t->setSeekSmallStep(*reinterpret_cast< int*>(_v)); break;
        case 20: _t->setSeekMediumStep(*reinterpret_cast< int*>(_v)); break;
        case 22: _t->setSeekBigStep(*reinterpret_cast< int*>(_v)); break;
        case 24: _t->setSeekToLastPosition(*reinterpret_cast< bool*>(_v)); break;
        case 26: _t->setOpenLastPlayedFile(*reinterpret_cast< bool*>(_v)); break;
        case 28: _t->setPauseWhileMinimized(*reinterpret_cast< bool*>(_v)); break;
        case 30: _t->setPlayOnResume(*reinterpret_cast< bool*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
    (void)_a;
}

const QMetaObject *PlaybackSettings::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *PlaybackSettings::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSPlaybackSettingsENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return KConfigSkeleton::qt_metacast(_clname);
}

int PlaybackSettings::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = KConfigSkeleton::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 16;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 32;
    }
    return _id;
}

// SIGNAL 0
void PlaybackSettings::MinDurationToSavePositionChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void PlaybackSettings::SavePositionIntervalChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void PlaybackSettings::SkipChaptersChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void PlaybackSettings::ChaptersToSkipChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void PlaybackSettings::ShowOsdOnSkipChaptersChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void PlaybackSettings::YtdlFormatChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}

// SIGNAL 6
void PlaybackSettings::YtdlFormatCustomChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 6, nullptr);
}

// SIGNAL 7
void PlaybackSettings::UseHWDecodingChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 7, nullptr);
}

// SIGNAL 8
void PlaybackSettings::HWDecodingChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 8, nullptr);
}

// SIGNAL 9
void PlaybackSettings::SeekSmallStepChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 9, nullptr);
}

// SIGNAL 10
void PlaybackSettings::SeekMediumStepChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 10, nullptr);
}

// SIGNAL 11
void PlaybackSettings::SeekBigStepChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 11, nullptr);
}

// SIGNAL 12
void PlaybackSettings::SeekToLastPositionChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 12, nullptr);
}

// SIGNAL 13
void PlaybackSettings::OpenLastPlayedFileChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 13, nullptr);
}

// SIGNAL 14
void PlaybackSettings::PauseWhileMinimizedChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 14, nullptr);
}

// SIGNAL 15
void PlaybackSettings::PlayOnResumeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 15, nullptr);
}
QT_WARNING_POP
