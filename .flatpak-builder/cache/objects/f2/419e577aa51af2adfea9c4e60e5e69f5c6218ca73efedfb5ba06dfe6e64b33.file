/****************************************************************************
** Meta object code from reading C++ file 'subtitlessettings.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../subtitlessettings.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'subtitlessettings.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSSubtitlesSettingsENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSSubtitlesSettingsENDCLASS = QtMocHelpers::stringData(
    "SubtitlesSettings",
    "SubtitlesFoldersChanged",
    "",
    "PreferredLanguageChanged",
    "PreferredTrackChanged",
    "AllowOnBlackBordersChanged",
    "FontFamilyChanged",
    "FontSizeChanged",
    "FontColorChanged",
    "ShadowColorChanged",
    "ShadowOffsetChanged",
    "BorderColorChanged",
    "BorderSizeChanged",
    "IsBoldChanged",
    "IsItalicChanged",
    "subtitlesFolders",
    "isSubtitlesFoldersImmutable",
    "preferredLanguage",
    "isPreferredLanguageImmutable",
    "preferredTrack",
    "isPreferredTrackImmutable",
    "allowOnBlackBorders",
    "isAllowOnBlackBordersImmutable",
    "fontFamily",
    "isFontFamilyImmutable",
    "fontSize",
    "isFontSizeImmutable",
    "fontColor",
    "isFontColorImmutable",
    "shadowColor",
    "isShadowColorImmutable",
    "shadowOffset",
    "isShadowOffsetImmutable",
    "borderColor",
    "isBorderColorImmutable",
    "borderSize",
    "isBorderSizeImmutable",
    "isBold",
    "isIsBoldImmutable",
    "isItalic",
    "isIsItalicImmutable"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSSubtitlesSettingsENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      13,   14, // methods
      26,  105, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
      13,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   92,    2, 0x06,   27 /* Public */,
       3,    0,   93,    2, 0x06,   28 /* Public */,
       4,    0,   94,    2, 0x06,   29 /* Public */,
       5,    0,   95,    2, 0x06,   30 /* Public */,
       6,    0,   96,    2, 0x06,   31 /* Public */,
       7,    0,   97,    2, 0x06,   32 /* Public */,
       8,    0,   98,    2, 0x06,   33 /* Public */,
       9,    0,   99,    2, 0x06,   34 /* Public */,
      10,    0,  100,    2, 0x06,   35 /* Public */,
      11,    0,  101,    2, 0x06,   36 /* Public */,
      12,    0,  102,    2, 0x06,   37 /* Public */,
      13,    0,  103,    2, 0x06,   38 /* Public */,
      14,    0,  104,    2, 0x06,   39 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // properties: name, type, flags, notifyId, revision
      15, QMetaType::QStringList, 0x00015103, uint(0), 0,
      16, QMetaType::Bool, 0x00015401, uint(-1), 0,
      17, QMetaType::QString, 0x00015103, uint(1), 0,
      18, QMetaType::Bool, 0x00015401, uint(-1), 0,
      19, QMetaType::Int, 0x00015103, uint(2), 0,
      20, QMetaType::Bool, 0x00015401, uint(-1), 0,
      21, QMetaType::Bool, 0x00015103, uint(3), 0,
      22, QMetaType::Bool, 0x00015401, uint(-1), 0,
      23, QMetaType::QString, 0x00015103, uint(4), 0,
      24, QMetaType::Bool, 0x00015401, uint(-1), 0,
      25, QMetaType::Int, 0x00015103, uint(5), 0,
      26, QMetaType::Bool, 0x00015401, uint(-1), 0,
      27, QMetaType::QString, 0x00015103, uint(6), 0,
      28, QMetaType::Bool, 0x00015401, uint(-1), 0,
      29, QMetaType::QString, 0x00015103, uint(7), 0,
      30, QMetaType::Bool, 0x00015401, uint(-1), 0,
      31, QMetaType::Int, 0x00015103, uint(8), 0,
      32, QMetaType::Bool, 0x00015401, uint(-1), 0,
      33, QMetaType::QString, 0x00015103, uint(9), 0,
      34, QMetaType::Bool, 0x00015401, uint(-1), 0,
      35, QMetaType::Int, 0x00015103, uint(10), 0,
      36, QMetaType::Bool, 0x00015401, uint(-1), 0,
      37, QMetaType::Bool, 0x00015103, uint(11), 0,
      38, QMetaType::Bool, 0x00015401, uint(-1), 0,
      39, QMetaType::Bool, 0x00015103, uint(12), 0,
      40, QMetaType::Bool, 0x00015401, uint(-1), 0,

       0        // eod
};

Q_CONSTINIT const QMetaObject SubtitlesSettings::staticMetaObject = { {
    QMetaObject::SuperData::link<KConfigSkeleton::staticMetaObject>(),
    qt_meta_stringdata_CLASSSubtitlesSettingsENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSSubtitlesSettingsENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSSubtitlesSettingsENDCLASS_t,
        // property 'subtitlesFolders'
        QtPrivate::TypeAndForceComplete<QStringList, std::true_type>,
        // property 'isSubtitlesFoldersImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'preferredLanguage'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isPreferredLanguageImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'preferredTrack'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isPreferredTrackImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'allowOnBlackBorders'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isAllowOnBlackBordersImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'fontFamily'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isFontFamilyImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'fontSize'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isFontSizeImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'fontColor'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isFontColorImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'shadowColor'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isShadowColorImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'shadowOffset'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isShadowOffsetImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'borderColor'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isBorderColorImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'borderSize'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isBorderSizeImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isBold'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isIsBoldImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isItalic'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isIsItalicImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<SubtitlesSettings, std::true_type>,
        // method 'SubtitlesFoldersChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'PreferredLanguageChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'PreferredTrackChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'AllowOnBlackBordersChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FontFamilyChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FontSizeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FontColorChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShadowColorChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShadowOffsetChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'BorderColorChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'BorderSizeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'IsBoldChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'IsItalicChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void SubtitlesSettings::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<SubtitlesSettings *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->SubtitlesFoldersChanged(); break;
        case 1: _t->PreferredLanguageChanged(); break;
        case 2: _t->PreferredTrackChanged(); break;
        case 3: _t->AllowOnBlackBordersChanged(); break;
        case 4: _t->FontFamilyChanged(); break;
        case 5: _t->FontSizeChanged(); break;
        case 6: _t->FontColorChanged(); break;
        case 7: _t->ShadowColorChanged(); break;
        case 8: _t->ShadowOffsetChanged(); break;
        case 9: _t->BorderColorChanged(); break;
        case 10: _t->BorderSizeChanged(); break;
        case 11: _t->IsBoldChanged(); break;
        case 12: _t->IsItalicChanged(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::SubtitlesFoldersChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::PreferredLanguageChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::PreferredTrackChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::AllowOnBlackBordersChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::FontFamilyChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::FontSizeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::FontColorChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::ShadowColorChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::ShadowOffsetChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::BorderColorChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::BorderSizeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 10;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::IsBoldChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 11;
                return;
            }
        }
        {
            using _t = void (SubtitlesSettings::*)();
            if (_t _q_method = &SubtitlesSettings::IsItalicChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 12;
                return;
            }
        }
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<SubtitlesSettings *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QStringList*>(_v) = _t->subtitlesFolders(); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->isSubtitlesFoldersImmutable(); break;
        case 2: *reinterpret_cast< QString*>(_v) = _t->preferredLanguage(); break;
        case 3: *reinterpret_cast< bool*>(_v) = _t->isPreferredLanguageImmutable(); break;
        case 4: *reinterpret_cast< int*>(_v) = _t->preferredTrack(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isPreferredTrackImmutable(); break;
        case 6: *reinterpret_cast< bool*>(_v) = _t->allowOnBlackBorders(); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->isAllowOnBlackBordersImmutable(); break;
        case 8: *reinterpret_cast< QString*>(_v) = _t->fontFamily(); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->isFontFamilyImmutable(); break;
        case 10: *reinterpret_cast< int*>(_v) = _t->fontSize(); break;
        case 11: *reinterpret_cast< bool*>(_v) = _t->isFontSizeImmutable(); break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->fontColor(); break;
        case 13: *reinterpret_cast< bool*>(_v) = _t->isFontColorImmutable(); break;
        case 14: *reinterpret_cast< QString*>(_v) = _t->shadowColor(); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->isShadowColorImmutable(); break;
        case 16: *reinterpret_cast< int*>(_v) = _t->shadowOffset(); break;
        case 17: *reinterpret_cast< bool*>(_v) = _t->isShadowOffsetImmutable(); break;
        case 18: *reinterpret_cast< QString*>(_v) = _t->borderColor(); break;
        case 19: *reinterpret_cast< bool*>(_v) = _t->isBorderColorImmutable(); break;
        case 20: *reinterpret_cast< int*>(_v) = _t->borderSize(); break;
        case 21: *reinterpret_cast< bool*>(_v) = _t->isBorderSizeImmutable(); break;
        case 22: *reinterpret_cast< bool*>(_v) = _t->isBold(); break;
        case 23: *reinterpret_cast< bool*>(_v) = _t->isIsBoldImmutable(); break;
        case 24: *reinterpret_cast< bool*>(_v) = _t->isItalic(); break;
        case 25: *reinterpret_cast< bool*>(_v) = _t->isIsItalicImmutable(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<SubtitlesSettings *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setSubtitlesFolders(*reinterpret_cast< QStringList*>(_v)); break;
        case 2: _t->setPreferredLanguage(*reinterpret_cast< QString*>(_v)); break;
        case 4: _t->setPreferredTrack(*reinterpret_cast< int*>(_v)); break;
        case 6: _t->setAllowOnBlackBorders(*reinterpret_cast< bool*>(_v)); break;
        case 8: _t->setFontFamily(*reinterpret_cast< QString*>(_v)); break;
        case 10: _t->setFontSize(*reinterpret_cast< int*>(_v)); break;
        case 12: _t->setFontColor(*reinterpret_cast< QString*>(_v)); break;
        case 14: _t->setShadowColor(*reinterpret_cast< QString*>(_v)); break;
        case 16: _t->setShadowOffset(*reinterpret_cast< int*>(_v)); break;
        case 18: _t->setBorderColor(*reinterpret_cast< QString*>(_v)); break;
        case 20: _t->setBorderSize(*reinterpret_cast< int*>(_v)); break;
        case 22: _t->setIsBold(*reinterpret_cast< bool*>(_v)); break;
        case 24: _t->setIsItalic(*reinterpret_cast< bool*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
    (void)_a;
}

const QMetaObject *SubtitlesSettings::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SubtitlesSettings::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSSubtitlesSettingsENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return KConfigSkeleton::qt_metacast(_clname);
}

int SubtitlesSettings::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = KConfigSkeleton::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 13)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 13;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 13)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 13;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 26;
    }
    return _id;
}

// SIGNAL 0
void SubtitlesSettings::SubtitlesFoldersChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void SubtitlesSettings::PreferredLanguageChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void SubtitlesSettings::PreferredTrackChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void SubtitlesSettings::AllowOnBlackBordersChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void SubtitlesSettings::FontFamilyChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void SubtitlesSettings::FontSizeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}

// SIGNAL 6
void SubtitlesSettings::FontColorChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 6, nullptr);
}

// SIGNAL 7
void SubtitlesSettings::ShadowColorChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 7, nullptr);
}

// SIGNAL 8
void SubtitlesSettings::ShadowOffsetChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 8, nullptr);
}

// SIGNAL 9
void SubtitlesSettings::BorderColorChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 9, nullptr);
}

// SIGNAL 10
void SubtitlesSettings::BorderSizeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 10, nullptr);
}

// SIGNAL 11
void SubtitlesSettings::IsBoldChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 11, nullptr);
}

// SIGNAL 12
void SubtitlesSettings::IsItalicChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 12, nullptr);
}
QT_WARNING_POP
