// This file is generated by kconfig_compiler_kf6 from audiosettings.kcfg.
// All changes you do to this file will be lost.

#include "audiosettings.h"

#include <qglobal.h>
#include <QFile>

class AudioSettingsHelper
{
  public:
    AudioSettingsHelper() : q(nullptr) {}
    ~AudioSettingsHelper() { delete q; q = nullptr; }
    AudioSettingsHelper(const AudioSettingsHelper&) = delete;
    AudioSettingsHelper& operator=(const AudioSettingsHelper&) = delete;
    AudioSettings *q;
};
Q_GLOBAL_STATIC(AudioSettingsHelper, s_globalAudioSettings)
AudioSettings *AudioSettings::self()
{
  if (!s_globalAudioSettings()->q) {
    new AudioSettings;
    s_globalAudioSettings()->q->read();
  }

  return s_globalAudioSettings()->q;
}

AudioSettings::AudioSettings( QObject *parent )
  : KConfigSkeleton( QStringLiteral( "haruna/haruna.conf" ) )
{
  setParent(parent);
  Q_ASSERT(!s_globalAudioSettings()->q);
  s_globalAudioSettings()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&AudioSettings::itemChanged);

  setCurrentGroup( QStringLiteral( "Audio" ) );

  KConfigCompilerSignallingItem  *itemPreferredLanguage;
  KConfigSkeleton::ItemString  *innerItemPreferredLanguage;
  innerItemPreferredLanguage = new KConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "PreferredLanguage" ), mPreferredLanguage );
  itemPreferredLanguage = new KConfigCompilerSignallingItem(innerItemPreferredLanguage, this, notifyFunction, signalPreferredLanguageChanged);
  addItem( itemPreferredLanguage, QStringLiteral( "PreferredLanguage" ) );
  KConfigCompilerSignallingItem  *itemPreferredTrack;
  KConfigSkeleton::ItemInt  *innerItemPreferredTrack;
  innerItemPreferredTrack = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "PreferredTrack" ), mPreferredTrack );
  itemPreferredTrack = new KConfigCompilerSignallingItem(innerItemPreferredTrack, this, notifyFunction, signalPreferredTrackChanged);
  addItem( itemPreferredTrack, QStringLiteral( "PreferredTrack" ) );
  KConfigCompilerSignallingItem  *itemVolume;
  KConfigSkeleton::ItemInt  *innerItemVolume;
  innerItemVolume = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "Volume" ), mVolume, 80 );
  itemVolume = new KConfigCompilerSignallingItem(innerItemVolume, this, notifyFunction, signalVolumeChanged);
  addItem( itemVolume, QStringLiteral( "Volume" ) );
  KConfigCompilerSignallingItem  *itemVolumeStep;
  KConfigSkeleton::ItemInt  *innerItemVolumeStep;
  innerItemVolumeStep = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "VolumeStep" ), mVolumeStep, 5 );
  itemVolumeStep = new KConfigCompilerSignallingItem(innerItemVolumeStep, this, notifyFunction, signalVolumeStepChanged);
  addItem( itemVolumeStep, QStringLiteral( "VolumeStep" ) );
}

int AudioSettings::defaultVolumeValue_helper()
{

  return 80;
}

int AudioSettings::defaultVolumeStepValue_helper()
{

  return 5;
}

AudioSettings::~AudioSettings()
{
  if (s_globalAudioSettings.exists() && !s_globalAudioSettings.isDestroyed()) {
    s_globalAudioSettings()->q = nullptr;
  }
}


void AudioSettings::itemChanged(quint64 signalFlag) {

  switch (signalFlag) {
  case signalPreferredLanguageChanged:
    Q_EMIT PreferredLanguageChanged();
    break;
  case signalPreferredTrackChanged:
    Q_EMIT PreferredTrackChanged();
    break;
  case signalVolumeChanged:
    Q_EMIT VolumeChanged();
    break;
  case signalVolumeStepChanged:
    Q_EMIT VolumeStepChanged();
    break;
  }
}
