// This file is generated by kconfig_compiler_kf6 from playlistsettings.kcfg.
// All changes you do to this file will be lost.
#ifndef PLAYLISTSETTINGS_H
#define PLAYLISTSETTINGS_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

class PlaylistSettings : public KConfigSkeleton
{
  Q_OBJECT
  public:

    static PlaylistSettings *self();
    ~PlaylistSettings() override;

    /**
      Set Position
    */
    static
    void setPosition( const QString & v )
    {
      if (v != self()->mPosition && !self()->isPositionImmutable()) {
        self()->mPosition = v;
        Q_EMIT self()->PositionChanged();
      }
    }

    Q_PROPERTY(QString position READ position WRITE setPosition NOTIFY PositionChanged)
    Q_PROPERTY(bool isPositionImmutable READ isPositionImmutable CONSTANT)
    /**
      Get Position
    */
    static
    QString position()
    {
      return self()->mPosition;
    }

    /**
      Is Position Immutable
    */
    static
    bool isPositionImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Position" ) );
    }

    /**
      Get Position default value
    */
    static
    QString defaultPositionValue()
    {
        return defaultPositionValue_helper();
    }

    /**
      Set Style
    */
    static
    void setStyle( const QString & v )
    {
      if (v != self()->mStyle && !self()->isStyleImmutable()) {
        self()->mStyle = v;
        Q_EMIT self()->StyleChanged();
      }
    }

    Q_PROPERTY(QString style READ style WRITE setStyle NOTIFY StyleChanged)
    Q_PROPERTY(bool isStyleImmutable READ isStyleImmutable CONSTANT)
    /**
      Get Style
    */
    static
    QString style()
    {
      return self()->mStyle;
    }

    /**
      Is Style Immutable
    */
    static
    bool isStyleImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Style" ) );
    }

    /**
      Get Style default value
    */
    static
    QString defaultStyleValue()
    {
        return defaultStyleValue_helper();
    }

    /**
      Set OverlayVideo
    */
    static
    void setOverlayVideo( bool v )
    {
      if (v != self()->mOverlayVideo && !self()->isOverlayVideoImmutable()) {
        self()->mOverlayVideo = v;
        Q_EMIT self()->OverlayVideoChanged();
      }
    }

    Q_PROPERTY(bool overlayVideo READ overlayVideo WRITE setOverlayVideo NOTIFY OverlayVideoChanged)
    Q_PROPERTY(bool isOverlayVideoImmutable READ isOverlayVideoImmutable CONSTANT)
    /**
      Get OverlayVideo
    */
    static
    bool overlayVideo()
    {
      return self()->mOverlayVideo;
    }

    /**
      Is OverlayVideo Immutable
    */
    static
    bool isOverlayVideoImmutable()
    {
      return self()->isImmutable( QStringLiteral( "OverlayVideo" ) );
    }

    /**
      Get OverlayVideo default value
    */
    static
    bool defaultOverlayVideoValue()
    {
        return defaultOverlayVideoValue_helper();
    }

    /**
      Set ShowThumbnails
    */
    static
    void setShowThumbnails( bool v )
    {
      if (v != self()->mShowThumbnails && !self()->isShowThumbnailsImmutable()) {
        self()->mShowThumbnails = v;
        Q_EMIT self()->ShowThumbnailsChanged();
      }
    }

    Q_PROPERTY(bool showThumbnails READ showThumbnails WRITE setShowThumbnails NOTIFY ShowThumbnailsChanged)
    Q_PROPERTY(bool isShowThumbnailsImmutable READ isShowThumbnailsImmutable CONSTANT)
    /**
      Get ShowThumbnails
    */
    static
    bool showThumbnails()
    {
      return self()->mShowThumbnails;
    }

    /**
      Is ShowThumbnails Immutable
    */
    static
    bool isShowThumbnailsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShowThumbnails" ) );
    }

    /**
      Get ShowThumbnails default value
    */
    static
    bool defaultShowThumbnailsValue()
    {
        return defaultShowThumbnailsValue_helper();
    }

    /**
      Set ShowMediaTitle
    */
    static
    void setShowMediaTitle( bool v )
    {
      if (v != self()->mShowMediaTitle && !self()->isShowMediaTitleImmutable()) {
        self()->mShowMediaTitle = v;
        Q_EMIT self()->ShowMediaTitleChanged();
      }
    }

    Q_PROPERTY(bool showMediaTitle READ showMediaTitle WRITE setShowMediaTitle NOTIFY ShowMediaTitleChanged)
    Q_PROPERTY(bool isShowMediaTitleImmutable READ isShowMediaTitleImmutable CONSTANT)
    /**
      Get ShowMediaTitle
    */
    static
    bool showMediaTitle()
    {
      return self()->mShowMediaTitle;
    }

    /**
      Is ShowMediaTitle Immutable
    */
    static
    bool isShowMediaTitleImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShowMediaTitle" ) );
    }

    /**
      Get ShowMediaTitle default value
    */
    static
    bool defaultShowMediaTitleValue()
    {
        return defaultShowMediaTitleValue_helper();
    }

    /**
      Set LoadSiblings
    */
    static
    void setLoadSiblings( bool v )
    {
      if (v != self()->mLoadSiblings && !self()->isLoadSiblingsImmutable()) {
        self()->mLoadSiblings = v;
        Q_EMIT self()->LoadSiblingsChanged();
      }
    }

    Q_PROPERTY(bool loadSiblings READ loadSiblings WRITE setLoadSiblings NOTIFY LoadSiblingsChanged)
    Q_PROPERTY(bool isLoadSiblingsImmutable READ isLoadSiblingsImmutable CONSTANT)
    /**
      Get LoadSiblings
    */
    static
    bool loadSiblings()
    {
      return self()->mLoadSiblings;
    }

    /**
      Is LoadSiblings Immutable
    */
    static
    bool isLoadSiblingsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "LoadSiblings" ) );
    }

    /**
      Get LoadSiblings default value
    */
    static
    bool defaultLoadSiblingsValue()
    {
        return defaultLoadSiblingsValue_helper();
    }

    /**
      Set Repeat
    */
    static
    void setRepeat( bool v )
    {
      if (v != self()->mRepeat && !self()->isRepeatImmutable()) {
        self()->mRepeat = v;
        Q_EMIT self()->RepeatChanged();
      }
    }

    Q_PROPERTY(bool repeat READ repeat WRITE setRepeat NOTIFY RepeatChanged)
    Q_PROPERTY(bool isRepeatImmutable READ isRepeatImmutable CONSTANT)
    /**
      Get Repeat
    */
    static
    bool repeat()
    {
      return self()->mRepeat;
    }

    /**
      Is Repeat Immutable
    */
    static
    bool isRepeatImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Repeat" ) );
    }

    /**
      Get Repeat default value
    */
    static
    bool defaultRepeatValue()
    {
        return defaultRepeatValue_helper();
    }

    /**
      Set ShowRowNumber
    */
    static
    void setShowRowNumber( bool v )
    {
      if (v != self()->mShowRowNumber && !self()->isShowRowNumberImmutable()) {
        self()->mShowRowNumber = v;
        Q_EMIT self()->ShowRowNumberChanged();
      }
    }

    Q_PROPERTY(bool showRowNumber READ showRowNumber WRITE setShowRowNumber NOTIFY ShowRowNumberChanged)
    Q_PROPERTY(bool isShowRowNumberImmutable READ isShowRowNumberImmutable CONSTANT)
    /**
      Get ShowRowNumber
    */
    static
    bool showRowNumber()
    {
      return self()->mShowRowNumber;
    }

    /**
      Is ShowRowNumber Immutable
    */
    static
    bool isShowRowNumberImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShowRowNumber" ) );
    }

    /**
      Get ShowRowNumber default value
    */
    static
    bool defaultShowRowNumberValue()
    {
        return defaultShowRowNumberValue_helper();
    }

    /**
      Set CanToggleWithMouse
    */
    static
    void setCanToggleWithMouse( bool v )
    {
      if (v != self()->mCanToggleWithMouse && !self()->isCanToggleWithMouseImmutable()) {
        self()->mCanToggleWithMouse = v;
        Q_EMIT self()->CanToggleWithMouseChanged();
      }
    }

    Q_PROPERTY(bool canToggleWithMouse READ canToggleWithMouse WRITE setCanToggleWithMouse NOTIFY CanToggleWithMouseChanged)
    Q_PROPERTY(bool isCanToggleWithMouseImmutable READ isCanToggleWithMouseImmutable CONSTANT)
    /**
      Get CanToggleWithMouse
    */
    static
    bool canToggleWithMouse()
    {
      return self()->mCanToggleWithMouse;
    }

    /**
      Is CanToggleWithMouse Immutable
    */
    static
    bool isCanToggleWithMouseImmutable()
    {
      return self()->isImmutable( QStringLiteral( "CanToggleWithMouse" ) );
    }

    /**
      Get CanToggleWithMouse default value
    */
    static
    bool defaultCanToggleWithMouseValue()
    {
        return defaultCanToggleWithMouseValue_helper();
    }

    /**
      Set BigFontFullscreen
    */
    static
    void setBigFontFullscreen( bool v )
    {
      if (v != self()->mBigFontFullscreen && !self()->isBigFontFullscreenImmutable()) {
        self()->mBigFontFullscreen = v;
        Q_EMIT self()->BigFontFullscreenChanged();
      }
    }

    Q_PROPERTY(bool bigFontFullscreen READ bigFontFullscreen WRITE setBigFontFullscreen NOTIFY BigFontFullscreenChanged)
    Q_PROPERTY(bool isBigFontFullscreenImmutable READ isBigFontFullscreenImmutable CONSTANT)
    /**
      Get BigFontFullscreen
    */
    static
    bool bigFontFullscreen()
    {
      return self()->mBigFontFullscreen;
    }

    /**
      Is BigFontFullscreen Immutable
    */
    static
    bool isBigFontFullscreenImmutable()
    {
      return self()->isImmutable( QStringLiteral( "BigFontFullscreen" ) );
    }

    /**
      Get BigFontFullscreen default value
    */
    static
    bool defaultBigFontFullscreenValue()
    {
        return defaultBigFontFullscreenValue_helper();
    }

    /**
      Set RememberState
    */
    static
    void setRememberState( bool v )
    {
      if (v != self()->mRememberState && !self()->isRememberStateImmutable()) {
        self()->mRememberState = v;
        Q_EMIT self()->RememberStateChanged();
      }
    }

    Q_PROPERTY(bool rememberState READ rememberState WRITE setRememberState NOTIFY RememberStateChanged)
    Q_PROPERTY(bool isRememberStateImmutable READ isRememberStateImmutable CONSTANT)
    /**
      Get RememberState
    */
    static
    bool rememberState()
    {
      return self()->mRememberState;
    }

    /**
      Is RememberState Immutable
    */
    static
    bool isRememberStateImmutable()
    {
      return self()->isImmutable( QStringLiteral( "RememberState" ) );
    }

    /**
      Get RememberState default value
    */
    static
    bool defaultRememberStateValue()
    {
        return defaultRememberStateValue_helper();
    }

    /**
      Set Visible
    */
    static
    void setVisible( bool v )
    {
      if (v != self()->mVisible && !self()->isVisibleImmutable()) {
        self()->mVisible = v;
        Q_EMIT self()->VisibleChanged();
      }
    }

    Q_PROPERTY(bool visible READ visible WRITE setVisible NOTIFY VisibleChanged)
    Q_PROPERTY(bool isVisibleImmutable READ isVisibleImmutable CONSTANT)
    /**
      Get Visible
    */
    static
    bool visible()
    {
      return self()->mVisible;
    }

    /**
      Is Visible Immutable
    */
    static
    bool isVisibleImmutable()
    {
      return self()->isImmutable( QStringLiteral( "Visible" ) );
    }

    /**
      Get Visible default value
    */
    static
    bool defaultVisibleValue()
    {
        return defaultVisibleValue_helper();
    }

    /**
      Set ShowToolbar
    */
    static
    void setShowToolbar( bool v )
    {
      if (v != self()->mShowToolbar && !self()->isShowToolbarImmutable()) {
        self()->mShowToolbar = v;
        Q_EMIT self()->ShowToolbarChanged();
      }
    }

    Q_PROPERTY(bool showToolbar READ showToolbar WRITE setShowToolbar NOTIFY ShowToolbarChanged)
    Q_PROPERTY(bool isShowToolbarImmutable READ isShowToolbarImmutable CONSTANT)
    /**
      Get ShowToolbar
    */
    static
    bool showToolbar()
    {
      return self()->mShowToolbar;
    }

    /**
      Is ShowToolbar Immutable
    */
    static
    bool isShowToolbarImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShowToolbar" ) );
    }

    /**
      Get ShowToolbar default value
    */
    static
    bool defaultShowToolbarValue()
    {
        return defaultShowToolbarValue_helper();
    }

    /**
      Set OpenWithSingleClick
    */
    static
    void setOpenWithSingleClick( bool v )
    {
      if (v != self()->mOpenWithSingleClick && !self()->isOpenWithSingleClickImmutable()) {
        self()->mOpenWithSingleClick = v;
        Q_EMIT self()->OpenWithSingleClickChanged();
      }
    }

    Q_PROPERTY(bool openWithSingleClick READ openWithSingleClick WRITE setOpenWithSingleClick NOTIFY OpenWithSingleClickChanged)
    Q_PROPERTY(bool isOpenWithSingleClickImmutable READ isOpenWithSingleClickImmutable CONSTANT)
    /**
      Get OpenWithSingleClick
    */
    static
    bool openWithSingleClick()
    {
      return self()->mOpenWithSingleClick;
    }

    /**
      Is OpenWithSingleClick Immutable
    */
    static
    bool isOpenWithSingleClickImmutable()
    {
      return self()->isImmutable( QStringLiteral( "OpenWithSingleClick" ) );
    }

    /**
      Get OpenWithSingleClick default value
    */
    static
    bool defaultOpenWithSingleClickValue()
    {
        return defaultOpenWithSingleClickValue_helper();
    }


    enum {
      signalPositionChanged = 1,
      signalStyleChanged = 2,
      signalOverlayVideoChanged = 3,
      signalShowThumbnailsChanged = 4,
      signalShowMediaTitleChanged = 5,
      signalLoadSiblingsChanged = 6,
      signalRepeatChanged = 7,
      signalShowRowNumberChanged = 8,
      signalCanToggleWithMouseChanged = 9,
      signalBigFontFullscreenChanged = 10,
      signalRememberStateChanged = 11,
      signalVisibleChanged = 12,
      signalShowToolbarChanged = 13,
      signalOpenWithSingleClickChanged = 14
    };

  Q_SIGNALS:
    void PositionChanged();

    void StyleChanged();

    void OverlayVideoChanged();

    void ShowThumbnailsChanged();

    void ShowMediaTitleChanged();

    void LoadSiblingsChanged();

    void RepeatChanged();

    void ShowRowNumberChanged();

    void CanToggleWithMouseChanged();

    void BigFontFullscreenChanged();

    void RememberStateChanged();

    void VisibleChanged();

    void ShowToolbarChanged();

    void OpenWithSingleClickChanged();

  private:
    void itemChanged(quint64 signalFlag);

  protected:
    PlaylistSettings(QObject *parent = nullptr);
    friend class PlaylistSettingsHelper;


    // Playlist
    QString mPosition;
    static QString defaultPositionValue_helper();
    QString mStyle;
    static QString defaultStyleValue_helper();
    bool mOverlayVideo;
    static bool defaultOverlayVideoValue_helper();
    bool mShowThumbnails;
    static bool defaultShowThumbnailsValue_helper();
    bool mShowMediaTitle;
    static bool defaultShowMediaTitleValue_helper();
    bool mLoadSiblings;
    static bool defaultLoadSiblingsValue_helper();
    bool mRepeat;
    static bool defaultRepeatValue_helper();
    bool mShowRowNumber;
    static bool defaultShowRowNumberValue_helper();
    bool mCanToggleWithMouse;
    static bool defaultCanToggleWithMouseValue_helper();
    bool mBigFontFullscreen;
    static bool defaultBigFontFullscreenValue_helper();
    bool mRememberState;
    static bool defaultRememberStateValue_helper();
    bool mVisible;
    static bool defaultVisibleValue_helper();
    bool mShowToolbar;
    static bool defaultShowToolbarValue_helper();
    bool mOpenWithSingleClick;
    static bool defaultOpenWithSingleClickValue_helper();

  private:
};

#endif

