/****************************************************************************
** Meta object code from reading C++ file 'generalsettings.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../generalsettings.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'generalsettings.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSGeneralSettingsENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSGeneralSettingsENDCLASS = QtMocHelpers::stringData(
    "GeneralSettings",
    "OsdFontSizeChanged",
    "",
    "ShowMenuBarChanged",
    "ShowHeaderChanged",
    "ShowChapterMarkersChanged",
    "ColorSchemeChanged",
    "UseBreezeIconThemeChanged",
    "GuiStyleChanged",
    "LastPlayedFileChanged",
    "LastPlaylistChanged",
    "FileDialogLocationChanged",
    "FileDialogLastLocationChanged",
    "LastUrlChanged",
    "MaxRecentFilesChanged",
    "RememberWindowGeometryChanged",
    "ShowPreviewThumbnailChanged",
    "AccuratePreviewThumbnailChanged",
    "PreviewThumbnailWidthChanged",
    "ResizeWindowToVideoChanged",
    "UseSingleInstanceChanged",
    "AppendVideoToSingleInstanceChanged",
    "FooterStyleChanged",
    "FloatingFooterTriggerChanged",
    "osdFontSize",
    "isOsdFontSizeImmutable",
    "showMenuBar",
    "isShowMenuBarImmutable",
    "showHeader",
    "isShowHeaderImmutable",
    "showChapterMarkers",
    "isShowChapterMarkersImmutable",
    "colorScheme",
    "isColorSchemeImmutable",
    "useBreezeIconTheme",
    "isUseBreezeIconThemeImmutable",
    "guiStyle",
    "isGuiStyleImmutable",
    "lastPlayedFile",
    "isLastPlayedFileImmutable",
    "lastPlaylist",
    "isLastPlaylistImmutable",
    "fileDialogLocation",
    "isFileDialogLocationImmutable",
    "fileDialogLastLocation",
    "isFileDialogLastLocationImmutable",
    "lastUrl",
    "isLastUrlImmutable",
    "maxRecentFiles",
    "isMaxRecentFilesImmutable",
    "rememberWindowGeometry",
    "isRememberWindowGeometryImmutable",
    "showPreviewThumbnail",
    "isShowPreviewThumbnailImmutable",
    "accuratePreviewThumbnail",
    "isAccuratePreviewThumbnailImmutable",
    "previewThumbnailWidth",
    "isPreviewThumbnailWidthImmutable",
    "resizeWindowToVideo",
    "isResizeWindowToVideoImmutable",
    "useSingleInstance",
    "isUseSingleInstanceImmutable",
    "appendVideoToSingleInstance",
    "isAppendVideoToSingleInstanceImmutable",
    "footerStyle",
    "isFooterStyleImmutable",
    "floatingFooterTrigger",
    "isFloatingFooterTriggerImmutable"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSGeneralSettingsENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      22,   14, // methods
      44,  168, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
      22,       // signalCount

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  146,    2, 0x06,   45 /* Public */,
       3,    0,  147,    2, 0x06,   46 /* Public */,
       4,    0,  148,    2, 0x06,   47 /* Public */,
       5,    0,  149,    2, 0x06,   48 /* Public */,
       6,    0,  150,    2, 0x06,   49 /* Public */,
       7,    0,  151,    2, 0x06,   50 /* Public */,
       8,    0,  152,    2, 0x06,   51 /* Public */,
       9,    0,  153,    2, 0x06,   52 /* Public */,
      10,    0,  154,    2, 0x06,   53 /* Public */,
      11,    0,  155,    2, 0x06,   54 /* Public */,
      12,    0,  156,    2, 0x06,   55 /* Public */,
      13,    0,  157,    2, 0x06,   56 /* Public */,
      14,    0,  158,    2, 0x06,   57 /* Public */,
      15,    0,  159,    2, 0x06,   58 /* Public */,
      16,    0,  160,    2, 0x06,   59 /* Public */,
      17,    0,  161,    2, 0x06,   60 /* Public */,
      18,    0,  162,    2, 0x06,   61 /* Public */,
      19,    0,  163,    2, 0x06,   62 /* Public */,
      20,    0,  164,    2, 0x06,   63 /* Public */,
      21,    0,  165,    2, 0x06,   64 /* Public */,
      22,    0,  166,    2, 0x06,   65 /* Public */,
      23,    0,  167,    2, 0x06,   66 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

 // properties: name, type, flags, notifyId, revision
      24, QMetaType::Int, 0x00015103, uint(0), 0,
      25, QMetaType::Bool, 0x00015401, uint(-1), 0,
      26, QMetaType::Bool, 0x00015103, uint(1), 0,
      27, QMetaType::Bool, 0x00015401, uint(-1), 0,
      28, QMetaType::Bool, 0x00015103, uint(2), 0,
      29, QMetaType::Bool, 0x00015401, uint(-1), 0,
      30, QMetaType::Bool, 0x00015103, uint(3), 0,
      31, QMetaType::Bool, 0x00015401, uint(-1), 0,
      32, QMetaType::QString, 0x00015103, uint(4), 0,
      33, QMetaType::Bool, 0x00015401, uint(-1), 0,
      34, QMetaType::Bool, 0x00015103, uint(5), 0,
      35, QMetaType::Bool, 0x00015401, uint(-1), 0,
      36, QMetaType::QString, 0x00015103, uint(6), 0,
      37, QMetaType::Bool, 0x00015401, uint(-1), 0,
      38, QMetaType::QString, 0x00015103, uint(7), 0,
      39, QMetaType::Bool, 0x00015401, uint(-1), 0,
      40, QMetaType::QString, 0x00015103, uint(8), 0,
      41, QMetaType::Bool, 0x00015401, uint(-1), 0,
      42, QMetaType::QString, 0x00015103, uint(9), 0,
      43, QMetaType::Bool, 0x00015401, uint(-1), 0,
      44, QMetaType::QString, 0x00015103, uint(10), 0,
      45, QMetaType::Bool, 0x00015401, uint(-1), 0,
      46, QMetaType::QString, 0x00015103, uint(11), 0,
      47, QMetaType::Bool, 0x00015401, uint(-1), 0,
      48, QMetaType::Int, 0x00015103, uint(12), 0,
      49, QMetaType::Bool, 0x00015401, uint(-1), 0,
      50, QMetaType::Bool, 0x00015103, uint(13), 0,
      51, QMetaType::Bool, 0x00015401, uint(-1), 0,
      52, QMetaType::Bool, 0x00015103, uint(14), 0,
      53, QMetaType::Bool, 0x00015401, uint(-1), 0,
      54, QMetaType::Bool, 0x00015103, uint(15), 0,
      55, QMetaType::Bool, 0x00015401, uint(-1), 0,
      56, QMetaType::Int, 0x00015103, uint(16), 0,
      57, QMetaType::Bool, 0x00015401, uint(-1), 0,
      58, QMetaType::Bool, 0x00015103, uint(17), 0,
      59, QMetaType::Bool, 0x00015401, uint(-1), 0,
      60, QMetaType::Bool, 0x00015103, uint(18), 0,
      61, QMetaType::Bool, 0x00015401, uint(-1), 0,
      62, QMetaType::Bool, 0x00015103, uint(19), 0,
      63, QMetaType::Bool, 0x00015401, uint(-1), 0,
      64, QMetaType::QString, 0x00015103, uint(20), 0,
      65, QMetaType::Bool, 0x00015401, uint(-1), 0,
      66, QMetaType::QString, 0x00015103, uint(21), 0,
      67, QMetaType::Bool, 0x00015401, uint(-1), 0,

       0        // eod
};

Q_CONSTINIT const QMetaObject GeneralSettings::staticMetaObject = { {
    QMetaObject::SuperData::link<KConfigSkeleton::staticMetaObject>(),
    qt_meta_stringdata_CLASSGeneralSettingsENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSGeneralSettingsENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSGeneralSettingsENDCLASS_t,
        // property 'osdFontSize'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isOsdFontSizeImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'showMenuBar'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isShowMenuBarImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'showHeader'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isShowHeaderImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'showChapterMarkers'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isShowChapterMarkersImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'colorScheme'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isColorSchemeImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'useBreezeIconTheme'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isUseBreezeIconThemeImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'guiStyle'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isGuiStyleImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'lastPlayedFile'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isLastPlayedFileImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'lastPlaylist'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isLastPlaylistImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'fileDialogLocation'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isFileDialogLocationImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'fileDialogLastLocation'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isFileDialogLastLocationImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'lastUrl'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isLastUrlImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'maxRecentFiles'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isMaxRecentFilesImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'rememberWindowGeometry'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isRememberWindowGeometryImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'showPreviewThumbnail'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isShowPreviewThumbnailImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'accuratePreviewThumbnail'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isAccuratePreviewThumbnailImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'previewThumbnailWidth'
        QtPrivate::TypeAndForceComplete<int, std::true_type>,
        // property 'isPreviewThumbnailWidthImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'resizeWindowToVideo'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isResizeWindowToVideoImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'useSingleInstance'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isUseSingleInstanceImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'appendVideoToSingleInstance'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'isAppendVideoToSingleInstanceImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'footerStyle'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isFooterStyleImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'floatingFooterTrigger'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'isFloatingFooterTriggerImmutable'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<GeneralSettings, std::true_type>,
        // method 'OsdFontSizeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShowMenuBarChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShowHeaderChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShowChapterMarkersChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ColorSchemeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'UseBreezeIconThemeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'GuiStyleChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'LastPlayedFileChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'LastPlaylistChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FileDialogLocationChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FileDialogLastLocationChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'LastUrlChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'MaxRecentFilesChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'RememberWindowGeometryChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ShowPreviewThumbnailChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'AccuratePreviewThumbnailChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'PreviewThumbnailWidthChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'ResizeWindowToVideoChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'UseSingleInstanceChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'AppendVideoToSingleInstanceChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FooterStyleChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'FloatingFooterTriggerChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void GeneralSettings::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<GeneralSettings *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->OsdFontSizeChanged(); break;
        case 1: _t->ShowMenuBarChanged(); break;
        case 2: _t->ShowHeaderChanged(); break;
        case 3: _t->ShowChapterMarkersChanged(); break;
        case 4: _t->ColorSchemeChanged(); break;
        case 5: _t->UseBreezeIconThemeChanged(); break;
        case 6: _t->GuiStyleChanged(); break;
        case 7: _t->LastPlayedFileChanged(); break;
        case 8: _t->LastPlaylistChanged(); break;
        case 9: _t->FileDialogLocationChanged(); break;
        case 10: _t->FileDialogLastLocationChanged(); break;
        case 11: _t->LastUrlChanged(); break;
        case 12: _t->MaxRecentFilesChanged(); break;
        case 13: _t->RememberWindowGeometryChanged(); break;
        case 14: _t->ShowPreviewThumbnailChanged(); break;
        case 15: _t->AccuratePreviewThumbnailChanged(); break;
        case 16: _t->PreviewThumbnailWidthChanged(); break;
        case 17: _t->ResizeWindowToVideoChanged(); break;
        case 18: _t->UseSingleInstanceChanged(); break;
        case 19: _t->AppendVideoToSingleInstanceChanged(); break;
        case 20: _t->FooterStyleChanged(); break;
        case 21: _t->FloatingFooterTriggerChanged(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::OsdFontSizeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::ShowMenuBarChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::ShowHeaderChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::ShowChapterMarkersChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::ColorSchemeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::UseBreezeIconThemeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::GuiStyleChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::LastPlayedFileChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::LastPlaylistChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::FileDialogLocationChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::FileDialogLastLocationChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 10;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::LastUrlChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 11;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::MaxRecentFilesChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 12;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::RememberWindowGeometryChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 13;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::ShowPreviewThumbnailChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 14;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::AccuratePreviewThumbnailChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 15;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::PreviewThumbnailWidthChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 16;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::ResizeWindowToVideoChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 17;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::UseSingleInstanceChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 18;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::AppendVideoToSingleInstanceChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 19;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::FooterStyleChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 20;
                return;
            }
        }
        {
            using _t = void (GeneralSettings::*)();
            if (_t _q_method = &GeneralSettings::FloatingFooterTriggerChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 21;
                return;
            }
        }
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<GeneralSettings *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< int*>(_v) = _t->osdFontSize(); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->isOsdFontSizeImmutable(); break;
        case 2: *reinterpret_cast< bool*>(_v) = _t->showMenuBar(); break;
        case 3: *reinterpret_cast< bool*>(_v) = _t->isShowMenuBarImmutable(); break;
        case 4: *reinterpret_cast< bool*>(_v) = _t->showHeader(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isShowHeaderImmutable(); break;
        case 6: *reinterpret_cast< bool*>(_v) = _t->showChapterMarkers(); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->isShowChapterMarkersImmutable(); break;
        case 8: *reinterpret_cast< QString*>(_v) = _t->colorScheme(); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->isColorSchemeImmutable(); break;
        case 10: *reinterpret_cast< bool*>(_v) = _t->useBreezeIconTheme(); break;
        case 11: *reinterpret_cast< bool*>(_v) = _t->isUseBreezeIconThemeImmutable(); break;
        case 12: *reinterpret_cast< QString*>(_v) = _t->guiStyle(); break;
        case 13: *reinterpret_cast< bool*>(_v) = _t->isGuiStyleImmutable(); break;
        case 14: *reinterpret_cast< QString*>(_v) = _t->lastPlayedFile(); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->isLastPlayedFileImmutable(); break;
        case 16: *reinterpret_cast< QString*>(_v) = _t->lastPlaylist(); break;
        case 17: *reinterpret_cast< bool*>(_v) = _t->isLastPlaylistImmutable(); break;
        case 18: *reinterpret_cast< QString*>(_v) = _t->fileDialogLocation(); break;
        case 19: *reinterpret_cast< bool*>(_v) = _t->isFileDialogLocationImmutable(); break;
        case 20: *reinterpret_cast< QString*>(_v) = _t->fileDialogLastLocation(); break;
        case 21: *reinterpret_cast< bool*>(_v) = _t->isFileDialogLastLocationImmutable(); break;
        case 22: *reinterpret_cast< QString*>(_v) = _t->lastUrl(); break;
        case 23: *reinterpret_cast< bool*>(_v) = _t->isLastUrlImmutable(); break;
        case 24: *reinterpret_cast< int*>(_v) = _t->maxRecentFiles(); break;
        case 25: *reinterpret_cast< bool*>(_v) = _t->isMaxRecentFilesImmutable(); break;
        case 26: *reinterpret_cast< bool*>(_v) = _t->rememberWindowGeometry(); break;
        case 27: *reinterpret_cast< bool*>(_v) = _t->isRememberWindowGeometryImmutable(); break;
        case 28: *reinterpret_cast< bool*>(_v) = _t->showPreviewThumbnail(); break;
        case 29: *reinterpret_cast< bool*>(_v) = _t->isShowPreviewThumbnailImmutable(); break;
        case 30: *reinterpret_cast< bool*>(_v) = _t->accuratePreviewThumbnail(); break;
        case 31: *reinterpret_cast< bool*>(_v) = _t->isAccuratePreviewThumbnailImmutable(); break;
        case 32: *reinterpret_cast< int*>(_v) = _t->previewThumbnailWidth(); break;
        case 33: *reinterpret_cast< bool*>(_v) = _t->isPreviewThumbnailWidthImmutable(); break;
        case 34: *reinterpret_cast< bool*>(_v) = _t->resizeWindowToVideo(); break;
        case 35: *reinterpret_cast< bool*>(_v) = _t->isResizeWindowToVideoImmutable(); break;
        case 36: *reinterpret_cast< bool*>(_v) = _t->useSingleInstance(); break;
        case 37: *reinterpret_cast< bool*>(_v) = _t->isUseSingleInstanceImmutable(); break;
        case 38: *reinterpret_cast< bool*>(_v) = _t->appendVideoToSingleInstance(); break;
        case 39: *reinterpret_cast< bool*>(_v) = _t->isAppendVideoToSingleInstanceImmutable(); break;
        case 40: *reinterpret_cast< QString*>(_v) = _t->footerStyle(); break;
        case 41: *reinterpret_cast< bool*>(_v) = _t->isFooterStyleImmutable(); break;
        case 42: *reinterpret_cast< QString*>(_v) = _t->floatingFooterTrigger(); break;
        case 43: *reinterpret_cast< bool*>(_v) = _t->isFloatingFooterTriggerImmutable(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<GeneralSettings *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setOsdFontSize(*reinterpret_cast< int*>(_v)); break;
        case 2: _t->setShowMenuBar(*reinterpret_cast< bool*>(_v)); break;
        case 4: _t->setShowHeader(*reinterpret_cast< bool*>(_v)); break;
        case 6: _t->setShowChapterMarkers(*reinterpret_cast< bool*>(_v)); break;
        case 8: _t->setColorScheme(*reinterpret_cast< QString*>(_v)); break;
        case 10: _t->setUseBreezeIconTheme(*reinterpret_cast< bool*>(_v)); break;
        case 12: _t->setGuiStyle(*reinterpret_cast< QString*>(_v)); break;
        case 14: _t->setLastPlayedFile(*reinterpret_cast< QString*>(_v)); break;
        case 16: _t->setLastPlaylist(*reinterpret_cast< QString*>(_v)); break;
        case 18: _t->setFileDialogLocation(*reinterpret_cast< QString*>(_v)); break;
        case 20: _t->setFileDialogLastLocation(*reinterpret_cast< QString*>(_v)); break;
        case 22: _t->setLastUrl(*reinterpret_cast< QString*>(_v)); break;
        case 24: _t->setMaxRecentFiles(*reinterpret_cast< int*>(_v)); break;
        case 26: _t->setRememberWindowGeometry(*reinterpret_cast< bool*>(_v)); break;
        case 28: _t->setShowPreviewThumbnail(*reinterpret_cast< bool*>(_v)); break;
        case 30: _t->setAccuratePreviewThumbnail(*reinterpret_cast< bool*>(_v)); break;
        case 32: _t->setPreviewThumbnailWidth(*reinterpret_cast< int*>(_v)); break;
        case 34: _t->setResizeWindowToVideo(*reinterpret_cast< bool*>(_v)); break;
        case 36: _t->setUseSingleInstance(*reinterpret_cast< bool*>(_v)); break;
        case 38: _t->setAppendVideoToSingleInstance(*reinterpret_cast< bool*>(_v)); break;
        case 40: _t->setFooterStyle(*reinterpret_cast< QString*>(_v)); break;
        case 42: _t->setFloatingFooterTrigger(*reinterpret_cast< QString*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
    (void)_a;
}

const QMetaObject *GeneralSettings::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *GeneralSettings::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSGeneralSettingsENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return KConfigSkeleton::qt_metacast(_clname);
}

int GeneralSettings::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = KConfigSkeleton::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 22)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 22;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 22)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 22;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 44;
    }
    return _id;
}

// SIGNAL 0
void GeneralSettings::OsdFontSizeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void GeneralSettings::ShowMenuBarChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void GeneralSettings::ShowHeaderChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void GeneralSettings::ShowChapterMarkersChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void GeneralSettings::ColorSchemeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void GeneralSettings::UseBreezeIconThemeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}

// SIGNAL 6
void GeneralSettings::GuiStyleChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 6, nullptr);
}

// SIGNAL 7
void GeneralSettings::LastPlayedFileChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 7, nullptr);
}

// SIGNAL 8
void GeneralSettings::LastPlaylistChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 8, nullptr);
}

// SIGNAL 9
void GeneralSettings::FileDialogLocationChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 9, nullptr);
}

// SIGNAL 10
void GeneralSettings::FileDialogLastLocationChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 10, nullptr);
}

// SIGNAL 11
void GeneralSettings::LastUrlChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 11, nullptr);
}

// SIGNAL 12
void GeneralSettings::MaxRecentFilesChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 12, nullptr);
}

// SIGNAL 13
void GeneralSettings::RememberWindowGeometryChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 13, nullptr);
}

// SIGNAL 14
void GeneralSettings::ShowPreviewThumbnailChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 14, nullptr);
}

// SIGNAL 15
void GeneralSettings::AccuratePreviewThumbnailChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 15, nullptr);
}

// SIGNAL 16
void GeneralSettings::PreviewThumbnailWidthChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 16, nullptr);
}

// SIGNAL 17
void GeneralSettings::ResizeWindowToVideoChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 17, nullptr);
}

// SIGNAL 18
void GeneralSettings::UseSingleInstanceChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 18, nullptr);
}

// SIGNAL 19
void GeneralSettings::AppendVideoToSingleInstanceChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 19, nullptr);
}

// SIGNAL 20
void GeneralSettings::FooterStyleChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 20, nullptr);
}

// SIGNAL 21
void GeneralSettings::FloatingFooterTriggerChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 21, nullptr);
}
QT_WARNING_POP
