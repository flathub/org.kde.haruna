/****************************************************************************
** Meta object code from reading C++ file 'mediaplayer2player.h'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.8.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../mpris2/mediaplayer2player.h"
#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'mediaplayer2player.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.8.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSMediaPlayer2PlayerENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSMediaPlayer2PlayerENDCLASS = QtMocHelpers::stringData(
    "MediaPlayer2Player",
    "D-Bus Interface",
    "org.mpris.MediaPlayer2.Player",
    "next",
    "",
    "previous",
    "pause",
    "playpause",
    "stop",
    "play",
    "seek",
    "offset",
    "openUri",
    "uri",
    "playbackStatusChanged",
    "metadataChanged",
    "volumeChanged",
    "requestMprisThumbnail",
    "path",
    "width",
    "Next",
    "Previous",
    "Pause",
    "PlayPause",
    "Stop",
    "Play",
    "Seek",
    "SetPosition",
    "QDBusObjectPath",
    "trackId",
    "pos",
    "OpenUri",
    "PlaybackStatus",
    "Metadata",
    "QVariantMap",
    "Volume",
    "Position",
    "CanGoNext",
    "CanGoPrevious",
    "CanPlay",
    "CanPause",
    "CanSeek",
    "CanControl",
    "setPosition",
    "setVolume",
    "vol"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSMediaPlayer2PlayerENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       1,   14, // classinfo
      33,   16, // methods
      10,  267, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
      12,       // signalCount

 // classinfo: key, value
       1,    2,

 // signals: name, argc, parameters, tag, flags, initial metatype offsets
       3,    0,  214,    4, 0x06,   11 /* Public */,
       5,    0,  215,    4, 0x06,   12 /* Public */,
       6,    0,  216,    4, 0x06,   13 /* Public */,
       7,    0,  217,    4, 0x06,   14 /* Public */,
       8,    0,  218,    4, 0x06,   15 /* Public */,
       9,    0,  219,    4, 0x06,   16 /* Public */,
      10,    1,  220,    4, 0x06,   17 /* Public */,
      12,    1,  223,    4, 0x06,   19 /* Public */,
      14,    0,  226,    4, 0x06,   21 /* Public */,
      15,    0,  227,    4, 0x06,   22 /* Public */,
      16,    0,  228,    4, 0x06,   23 /* Public */,
      17,    2,  229,    4, 0x06,   24 /* Public */,

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
      20,    0,  234,    4, 0x0a,   27 /* Public */,
      21,    0,  235,    4, 0x0a,   28 /* Public */,
      22,    0,  236,    4, 0x0a,   29 /* Public */,
      23,    0,  237,    4, 0x0a,   30 /* Public */,
      24,    0,  238,    4, 0x0a,   31 /* Public */,
      25,    0,  239,    4, 0x0a,   32 /* Public */,
      26,    1,  240,    4, 0x0a,   33 /* Public */,
      27,    2,  243,    4, 0x0a,   35 /* Public */,
      31,    1,  248,    4, 0x0a,   38 /* Public */,
      32,    0,  251,    4, 0x0a,   40 /* Public */,
      33,    0,  252,    4, 0x0a,   41 /* Public */,
      35,    0,  253,    4, 0x0a,   42 /* Public */,
      36,    0,  254,    4, 0x0a,   43 /* Public */,
      37,    0,  255,    4, 0x0a,   44 /* Public */,
      38,    0,  256,    4, 0x0a,   45 /* Public */,
      39,    0,  257,    4, 0x0a,   46 /* Public */,
      40,    0,  258,    4, 0x0a,   47 /* Public */,
      41,    0,  259,    4, 0x0a,   48 /* Public */,
      42,    0,  260,    4, 0x0a,   49 /* Public */,
      43,    1,  261,    4, 0x0a,   50 /* Public */,
      44,    1,  264,    4, 0x0a,   52 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::Int,   11,
    QMetaType::Void, QMetaType::QString,   13,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::QString, QMetaType::Int,   18,   19,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, QMetaType::LongLong,   11,
    QMetaType::Void, 0x80000000 | 28, QMetaType::LongLong,   29,   30,
    QMetaType::Void, QMetaType::QString,   13,
    QMetaType::QString,
    0x80000000 | 34,
    QMetaType::Double,
    QMetaType::LongLong,
    QMetaType::Bool,
    QMetaType::Bool,
    QMetaType::Bool,
    QMetaType::Bool,
    QMetaType::Bool,
    QMetaType::Bool,
    QMetaType::Void, QMetaType::Int,   30,
    QMetaType::Void, QMetaType::Double,   45,

 // properties: name, type, flags, notifyId, revision
      32, QMetaType::QString, 0x00015001, uint(8), 0,
      33, 0x80000000 | 34, 0x00015009, uint(9), 0,
      35, QMetaType::Double, 0x00015103, uint(10), 0,
      36, QMetaType::LongLong, 0x00015103, uint(8), 0,
      37, QMetaType::Bool, 0x00015401, uint(-1), 0,
      38, QMetaType::Bool, 0x00015401, uint(-1), 0,
      39, QMetaType::Bool, 0x00015401, uint(-1), 0,
      40, QMetaType::Bool, 0x00015401, uint(-1), 0,
      41, QMetaType::Bool, 0x00015401, uint(-1), 0,
      42, QMetaType::Bool, 0x00015401, uint(-1), 0,

       0        // eod
};

Q_CONSTINIT const QMetaObject MediaPlayer2Player::staticMetaObject = { {
    QMetaObject::SuperData::link<QDBusAbstractAdaptor::staticMetaObject>(),
    qt_meta_stringdata_CLASSMediaPlayer2PlayerENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSMediaPlayer2PlayerENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSMediaPlayer2PlayerENDCLASS_t,
        // property 'PlaybackStatus'
        QtPrivate::TypeAndForceComplete<QString, std::true_type>,
        // property 'Metadata'
        QtPrivate::TypeAndForceComplete<QVariantMap, std::true_type>,
        // property 'Volume'
        QtPrivate::TypeAndForceComplete<double, std::true_type>,
        // property 'Position'
        QtPrivate::TypeAndForceComplete<qlonglong, std::true_type>,
        // property 'CanGoNext'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'CanGoPrevious'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'CanPlay'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'CanPause'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'CanSeek'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // property 'CanControl'
        QtPrivate::TypeAndForceComplete<bool, std::true_type>,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<MediaPlayer2Player, std::true_type>,
        // method 'next'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'previous'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'pause'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'playpause'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'stop'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'play'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'seek'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'openUri'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<QString, std::false_type>,
        // method 'playbackStatusChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'metadataChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'volumeChanged'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'requestMprisThumbnail'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'Next'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'Previous'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'Pause'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'PlayPause'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'Stop'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'Play'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'Seek'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<qlonglong, std::false_type>,
        // method 'SetPosition'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QDBusObjectPath &, std::false_type>,
        QtPrivate::TypeAndForceComplete<qlonglong, std::false_type>,
        // method 'OpenUri'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<const QString &, std::false_type>,
        // method 'PlaybackStatus'
        QtPrivate::TypeAndForceComplete<QString, std::false_type>,
        // method 'Metadata'
        QtPrivate::TypeAndForceComplete<QVariantMap, std::false_type>,
        // method 'Volume'
        QtPrivate::TypeAndForceComplete<double, std::false_type>,
        // method 'Position'
        QtPrivate::TypeAndForceComplete<qlonglong, std::false_type>,
        // method 'CanGoNext'
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'CanGoPrevious'
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'CanPlay'
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'CanPause'
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'CanSeek'
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'CanControl'
        QtPrivate::TypeAndForceComplete<bool, std::false_type>,
        // method 'setPosition'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<int, std::false_type>,
        // method 'setVolume'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        QtPrivate::TypeAndForceComplete<double, std::false_type>
    >,
    nullptr
} };

void MediaPlayer2Player::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<MediaPlayer2Player *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->next(); break;
        case 1: _t->previous(); break;
        case 2: _t->pause(); break;
        case 3: _t->playpause(); break;
        case 4: _t->stop(); break;
        case 5: _t->play(); break;
        case 6: _t->seek((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 7: _t->openUri((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 8: _t->playbackStatusChanged(); break;
        case 9: _t->metadataChanged(); break;
        case 10: _t->volumeChanged(); break;
        case 11: _t->requestMprisThumbnail((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<int>>(_a[2]))); break;
        case 12: _t->Next(); break;
        case 13: _t->Previous(); break;
        case 14: _t->Pause(); break;
        case 15: _t->PlayPause(); break;
        case 16: _t->Stop(); break;
        case 17: _t->Play(); break;
        case 18: _t->Seek((*reinterpret_cast< std::add_pointer_t<qlonglong>>(_a[1]))); break;
        case 19: _t->SetPosition((*reinterpret_cast< std::add_pointer_t<QDBusObjectPath>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<qlonglong>>(_a[2]))); break;
        case 20: _t->OpenUri((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 21: { QString _r = _t->PlaybackStatus();
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 22: { QVariantMap _r = _t->Metadata();
            if (_a[0]) *reinterpret_cast< QVariantMap*>(_a[0]) = std::move(_r); }  break;
        case 23: { double _r = _t->Volume();
            if (_a[0]) *reinterpret_cast< double*>(_a[0]) = std::move(_r); }  break;
        case 24: { qlonglong _r = _t->Position();
            if (_a[0]) *reinterpret_cast< qlonglong*>(_a[0]) = std::move(_r); }  break;
        case 25: { bool _r = _t->CanGoNext();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 26: { bool _r = _t->CanGoPrevious();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 27: { bool _r = _t->CanPlay();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 28: { bool _r = _t->CanPause();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 29: { bool _r = _t->CanSeek();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 30: { bool _r = _t->CanControl();
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = std::move(_r); }  break;
        case 31: _t->setPosition((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 32: _t->setVolume((*reinterpret_cast< std::add_pointer_t<double>>(_a[1]))); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::next; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 0;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::previous; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 1;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::pause; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 2;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::playpause; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 3;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::stop; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 4;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::play; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 5;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)(int );
            if (_t _q_method = &MediaPlayer2Player::seek; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 6;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)(QString );
            if (_t _q_method = &MediaPlayer2Player::openUri; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 7;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::playbackStatusChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 8;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::metadataChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 9;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)();
            if (_t _q_method = &MediaPlayer2Player::volumeChanged; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 10;
                return;
            }
        }
        {
            using _t = void (MediaPlayer2Player::*)(const QString & , int );
            if (_t _q_method = &MediaPlayer2Player::requestMprisThumbnail; *reinterpret_cast<_t *>(_a[1]) == _q_method) {
                *result = 11;
                return;
            }
        }
    } else if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<MediaPlayer2Player *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->PlaybackStatus(); break;
        case 1: *reinterpret_cast< QVariantMap*>(_v) = _t->Metadata(); break;
        case 2: *reinterpret_cast< double*>(_v) = _t->Volume(); break;
        case 3: *reinterpret_cast< qlonglong*>(_v) = _t->Position(); break;
        case 4: *reinterpret_cast< bool*>(_v) = _t->CanGoNext(); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->CanGoPrevious(); break;
        case 6: *reinterpret_cast< bool*>(_v) = _t->CanPlay(); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->CanPause(); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->CanSeek(); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->CanControl(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<MediaPlayer2Player *>(_o);
        (void)_t;
        void *_v = _a[0];
        switch (_id) {
        case 2: _t->setVolume(*reinterpret_cast< double*>(_v)); break;
        case 3: _t->setPosition(*reinterpret_cast< qlonglong*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    } else if (_c == QMetaObject::BindableProperty) {
    }
}

const QMetaObject *MediaPlayer2Player::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MediaPlayer2Player::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSMediaPlayer2PlayerENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QDBusAbstractAdaptor::qt_metacast(_clname);
}

int MediaPlayer2Player::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QDBusAbstractAdaptor::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 33)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 33;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 33)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 33;
    }else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::BindableProperty
            || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 10;
    }
    return _id;
}

// SIGNAL 0
void MediaPlayer2Player::next()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void MediaPlayer2Player::previous()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}

// SIGNAL 2
void MediaPlayer2Player::pause()
{
    QMetaObject::activate(this, &staticMetaObject, 2, nullptr);
}

// SIGNAL 3
void MediaPlayer2Player::playpause()
{
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
}

// SIGNAL 4
void MediaPlayer2Player::stop()
{
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
}

// SIGNAL 5
void MediaPlayer2Player::play()
{
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
}

// SIGNAL 6
void MediaPlayer2Player::seek(int _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 6, _a);
}

// SIGNAL 7
void MediaPlayer2Player::openUri(QString _t1)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))) };
    QMetaObject::activate(this, &staticMetaObject, 7, _a);
}

// SIGNAL 8
void MediaPlayer2Player::playbackStatusChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 8, nullptr);
}

// SIGNAL 9
void MediaPlayer2Player::metadataChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 9, nullptr);
}

// SIGNAL 10
void MediaPlayer2Player::volumeChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 10, nullptr);
}

// SIGNAL 11
void MediaPlayer2Player::requestMprisThumbnail(const QString & _t1, int _t2)
{
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t1))), const_cast<void*>(reinterpret_cast<const void*>(std::addressof(_t2))) };
    QMetaObject::activate(this, &staticMetaObject, 11, _a);
}
QT_WARNING_POP
